 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\THESIS~4\THESIS~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 103
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>              // part specific constants and macros
 0000           ; #include "PSoCAPI.h"          // PSoC API definitions for all User Modules
 0000           ; #include "psocdynamic.h"
 0000           ; #include <stdlib.h>
 0000           ; #include <string.h>
 0000           ; #pragma interrupt_handler TX_TIMEOUT_ISR
 0000           ; #pragma interrupt_handler RX_TIMEOUT_ISR
 0000           ; 
 0000           ; // These defines are used as parameters of the configToggle function.
 0000           ; // Passing one or the other in the function call switches the system between PC, TX, and RX modes.
 0000           ; #define               PC_MODE                                         (2)
 0000           ; #define               RX_MODE                                         (1)
 0000           ; #define               TX_MODE                                         (0)
 0000           ; 
 0000           ; // These defines are used as comparisons to find what port the newest module is connected to.
 0000           ; #define               PORT_1                                          ('1')
 0000           ; #define               PORT_2                                          ('2')
 0000           ; #define               PORT_3                                          ('3')
 0000           ; #define               PORT_4                                          ('4')
 0000           ; 
 0000           ; // These defines are used as transmission indicators.
 0000           ; #define               START_TRANSMIT                          (252)   // Indicates the beginning of a transmission.
 0000           ; #define               END_TRANSMIT                            (253)   // Indicates the end of a transmission.
 0000           ; #define               HELLO_BYTE                                      (200)   // Indicates master is ready to talk.
 0000           ; #define               ID_ASSIGNMENT                           (201)   // Indicates an ID assignment from the master.
 0000           ; #define               ID_ASSIGN_OK                            (202)   // Indicates an ID assignment is acknowledged.
 0000           ; #define               PING                                            (203)   // Indicates that someone is pinging someone else.
 0000           ; #define               CLEAR_CONFIG                            (204)   // Indicates that the master is asking for a config clear.
 0000           ; #define               CONFIG_CLEARED                          (205)   // Indicates that a module has cleared its own config.
 0000           ; #define               MASTER_ID                                       (0)             // The master node's ID.
 0000           ; #define               BROADCAST                                       (254)   // The broadcast ID for talking to all nodes.
 0000           ; #define               BLANK_MODULE_ID                         (251)   // This is the ID of an unconfigured module.
 0000           ; 
 0000           ; // These defines are used to fill in the instruction we are using on the servo.
 0000           ; #define               PING_SERVO                                      (1)             // This is the instruction number for ping.
 0000           ; #define               READ_SERVO                                      (2)             // This is the instruction number for a read.
 0000           ; #define               WRITE_SERVO                                     (3)             // This is the instruction number for a write.
 0000           ; #define               RESET_SERVO                                     (6)             // This is the instruction to reset the servo EEPROM.
 0000           ; 
 0000           ; // These defines are used for transmission timing.
 0000           ; #define       RX_TIMEOUT_DURATION                     (5)             // This is receive wait time in 1 ms units.
 0000           ; 
 0000           ; // These defines are used for the initial probing stage. This module first waits until it hears
 0000           ; // a byte on the bus. Once this happens, this module waits until there is a BUS_CLEAR_TIME
 0000           ; // period of no communication before attempting to probe for modules and assign ID numbers.
 0000           ; // MAX_TIMEOUTS is the number of failed attempts allowed to find an unconfigured module after
 0000           ; // the first module is found. After all of this, this module goes into a PC listening mode.
 0000           ; #define               BUS_CLEAR_TIME                          (100)   // Min time after a byte to assume bus is clear at boot.
 0000           ; #define               BOOT_TIMEOUT                            (300)   // If nothing is heard by this time, we start the init anyway.
 0000           ; #define               MAX_TIMEOUTS                            (50)    // Number of timeouts allowed before hello mode exit.
 0000           ; 
 0000           ; // This is the maximum number of allowable modules per branch out from the master
 0000           ; #define               MAX_MODULES                                     (250)
 0000           ; 
 0000           ; #define               SERVO_START                                     (255)
 0000           ; 
 0000           ; // This function receives a mode identifier as a parameter and toggles the
 0000           ; // system configuration between receive and transmit modes for half duplex UART.
 0000           ; void configToggle(int mode);
 0000           ; 
 0000           ; // This function pings the index passed to it. Returns 1 on success, 0 on fail.
 0000           ; int pingModule(int module_id);
 0000           ; 
 0000           ; // This function assigns an ID to a module.
 0000           ; int assignID(int assigned_ID);
 0000           ; 
 0000           ; int validTransmission(void);
 0000           ; 
 0000           ; void decodeTransmission(void);
 0000           ; 
 0000           ; void busListen(void);
 0000           ; 
 0000           ; void sayHello(void);
 0000           ; 
 0000           ; void servoInstruction(char id, char length, char instruction, char address, char value);
 0000           ; void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2);
 0000           ; 
 0000           ; int clearConfig(int module_id);
 0000           ; // This function checks the current mode and unloads the configuration for that mode.
 0000           ; void unloadAllConfigs(void);
 0000           ; // This function unloads the configuration corresponding to the number passed to it.
 0000           ; void unloadConfig(int config_num);
 0000           ; // Initialization function for the slave module controllers.
 0000           ; void initializeSlaves(void);
 0000           ; // Static wait time of approximately 50 microseconds for use after starting a transmission.
 0000           ; void xmitWait(void);
 0000           ; 
 0000           ; // This flag is set if there is a timeout.
 0000           ; int TIMEOUT;
 0000           ; 
 0000           ; int NUM_MODULES;                      // Stores the number of modules that have been discovered.
 0000           ; char COMMAND_SOURCE;          // Stores who the current command is from.
 0000           ; char COMMAND_DESTINATION;     // Stores who the current command is for.
 0000           ; char COMMAND_TYPE;                    // Stores the type of command that was just read.
 0000           ; char PARAM[10];                               // Stores a parameters that accompanies the command (if any).
 0000           ; int STATE;                                    // Stores the current configuration state of the system.
 0000           ; 
 0000           ; void main()
 0000           ; {     
 0000                   .dbline 105
 0000           ;       // Initialize the number of modules.
 0000           ;       NUM_MODULES = 0;
 0000 62D000            mov REG[0xd0],>_NUM_MODULES
 0003 550100            mov [_NUM_MODULES+1],0
 0006 550000            mov [_NUM_MODULES],0
 0009                   .dbline 108
 0009           ;       
 0009           ;       // Activate GPIO ISR.
 0009           ;       M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO);
 0009 43E020            or REG[0xe0],32
 000C                   .dbline 111
 000C           ;       
 000C           ;       // Turn on global interrupts for the transmission timeout timer.
 000C           ;       M8C_EnableGInt;
 000C 7101                      or  F, 01h
 000E           
 000E                   .dbline 114
 000E           ;       
 000E           ;       // Block and wait for the bus to be clear.
 000E           ;       busListen();
 000E 7C0D29            xcall _busListen
 0011 8021              xjmp L3
 0013           L2:
 0013                   .dbline 117
 0013           ;       
 0013           ;       while(1)
 0013           ;       {
 0013                   .dbline 118
 0013           ;               if(!NUM_MODULES)
 0013 62D000            mov REG[0xd0],>_NUM_MODULES
 0016 3C0000            cmp [_NUM_MODULES],0
 0019 B00B              jnz L5
 001B 3C0100            cmp [_NUM_MODULES+1],0
 001E B006              jnz L5
 0020           X1:
 0020                   .dbline 119
 0020           ;               {
 0020                   .dbline 120
 0020           ;                       initializeSlaves();
 0020 7C0D83            xcall _initializeSlaves
 0023                   .dbline 121
 0023           ;               }
 0023 800F              xjmp L6
 0025           L5:
 0025                   .dbline 122
 0025           ;               else if(COMP_SERIAL_bCmdCheck())                // If there's a computer command, read it.
 0025 10                push X
 0026 7C0000            xcall _COMP_SERIAL_bCmdCheck
 0029 62D000            mov REG[0xd0],>__r0
 002C 20                pop X
 002D 3900              cmp A,0
 002F A003              jz L7
 0031                   .dbline 123
 0031           ;               {
 0031                   .dbline 124
 0031           ;                       decodeTransmission();
 0031 942E              xcall _decodeTransmission
 0033                   .dbline 125
 0033           ;               }
 0033           L7:
 0033           L6:
 0033                   .dbline 126
 0033           ;       }
 0033           L3:
 0033                   .dbline 116
 0033 8FDF              xjmp L2
 0035           X0:
 0035                   .dbline -2
 0035           L1:
 0035                   .dbline 0 ; func end
 0035 8FFF              jmp .
 0037                   .dbend
 0037                   .dbfunc e pingModule _pingModule fI
 0037           ;       response -> X+0
 0037           ;      module_id -> X-5
 0037           _pingModule::
 0037                   .dbline -1
 0037 10                push X
 0038 4F                mov X,SP
 0039 3802              add SP,2
 003B                   .dbline 130
 003B           ; }
 003B           ; 
 003B           ; int pingModule(int module_id)
 003B           ; {
 003B                   .dbline 131
 003B           ;       int response = 0;
 003B 560100            mov [X+1],0
 003E 560000            mov [X+0],0
 0041                   .dbline 133
 0041           ;       
 0041           ;       configToggle(TX_MODE);  // Toggle into TX mode.
 0041 5000              mov A,0
 0043 08                push A
 0044 08                push A
 0045 7C0C11            xcall _configToggle
 0048 38FE              add SP,-2
 004A                   .dbline 136
 004A           ;                       
 004A           ;       // Transmit a hello.
 004A           ;       TRANSMIT_PutChar(START_TRANSMIT);
 004A 10                push X
 004B 50FC              mov A,-4
 004D 7C0000            xcall _TRANSMIT_PutChar
 0050 20                pop X
 0051                   .dbline 137
 0051           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0051 10                push X
 0052 50FC              mov A,-4
 0054 7C0000            xcall _TRANSMIT_PutChar
 0057 20                pop X
 0058                   .dbline 138
 0058           ;       TRANSMIT_PutChar(MASTER_ID);
 0058 10                push X
 0059 5000              mov A,0
 005B 7C0000            xcall _TRANSMIT_PutChar
 005E 20                pop X
 005F                   .dbline 139
 005F           ;       TRANSMIT_PutChar(module_id);
 005F 62D000            mov REG[0xd0],>__r0
 0062 52FC              mov A,[X-4]
 0064 10                push X
 0065 7C0000            xcall _TRANSMIT_PutChar
 0068 20                pop X
 0069                   .dbline 140
 0069           ;       TRANSMIT_PutChar(PING);
 0069 10                push X
 006A 50CB              mov A,-53
 006C 7C0000            xcall _TRANSMIT_PutChar
 006F 20                pop X
 0070                   .dbline 141
 0070           ;       TRANSMIT_PutChar(END_TRANSMIT);
 0070 10                push X
 0071 50FD              mov A,-3
 0073 7C0000            xcall _TRANSMIT_PutChar
 0076 20                pop X
 0077                   .dbline 142
 0077           ;       TRANSMIT_PutChar(END_TRANSMIT);
 0077 10                push X
 0078 50FD              mov A,-3
 007A 7C0000            xcall _TRANSMIT_PutChar
 007D 20                pop X
 007E           L10:
 007E                   .dbline 145
 007E           ;       
 007E           ;       // Wait for the transmission to finish.
 007E           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 007E           L11:
 007E                   .dbline 145
 007E 10                push X
 007F 7C0000            xcall _TRANSMIT_bReadTxStatus
 0082 62D000            mov REG[0xd0],>__r0
 0085 20                pop X
 0086 5300              mov [__r0],A
 0088 470020            tst [__r0],32
 008B AFF2              jz L10
 008D                   .dbline 147
 008D           ;       
 008D           ;       xmitWait();
 008D 7C0F00            xcall _xmitWait
 0090                   .dbline 149
 0090           ;       
 0090           ;       configToggle(RX_MODE);  // Listen for the response.
 0090 5000              mov A,0
 0092 08                push A
 0093 5001              mov A,1
 0095 08                push A
 0096 7C0C11            xcall _configToggle
 0099 38FE              add SP,-2
 009B                   .dbline 151
 009B           ;       
 009B           ;       RX_TIMEOUT_Stop();
 009B 10                push X
 009C 7C0000            xcall _RX_TIMEOUT_Stop
 009F 20                pop X
 00A0                   .dbline 152
 00A0           ;       TIMEOUT = 0;
 00A0 62D000            mov REG[0xd0],>_TIMEOUT
 00A3 550100            mov [_TIMEOUT+1],0
 00A6 550000            mov [_TIMEOUT],0
 00A9                   .dbline 153
 00A9           ;       RX_TIMEOUT_Start();
 00A9 10                push X
 00AA 7C0000            xcall _RX_TIMEOUT_Start
 00AD 20                pop X
 00AE 803C              xjmp L14
 00B0           L13:
 00B0                   .dbline 156
 00B0           ;       
 00B0           ;       while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
 00B0           ;       {
 00B0                   .dbline 157
 00B0           ;               if(validTransmission())
 00B0 92BB              xcall _validTransmission
 00B2 62D000            mov REG[0xd0],>__r0
 00B5 3C0000            cmp [__r0],0
 00B8 B006              jnz X2
 00BA 3C0000            cmp [__r1],0
 00BD A02D              jz L16
 00BF           X2:
 00BF                   .dbline 158
 00BF           ;               {
 00BF                   .dbline 159
 00BF           ;                       if(COMMAND_TYPE == PING)        // This is the response we are looking for.
 00BF 62D000            mov REG[0xd0],>_COMMAND_TYPE
 00C2 3C00CB            cmp [_COMMAND_TYPE],-53
 00C5 B025              jnz L18
 00C7                   .dbline 160
 00C7           ;                       {
 00C7                   .dbline 162
 00C7           ;                               // If this is for me, check who it was from.
 00C7           ;                               if(COMMAND_DESTINATION == MASTER_ID)
 00C7 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 00CA 3C0000            cmp [_COMMAND_DESTINATION],0
 00CD B01D              jnz L20
 00CF                   .dbline 163
 00CF           ;                               {
 00CF                   .dbline 164
 00CF           ;                                       if(COMMAND_SOURCE == module_id)
 00CF 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 00D2 5100              mov A,[_COMMAND_SOURCE]
 00D4 62D000            mov REG[0xd0],>__r0
 00D7 5300              mov [__r1],A
 00D9 5000              mov A,0
 00DB 3BFB              cmp A,[X-5]
 00DD B00D              jnz L22
 00DF 5100              mov A,[__r1]
 00E1 3BFC              cmp A,[X-4]
 00E3 B007              jnz L22
 00E5           X3:
 00E5                   .dbline 165
 00E5           ;                                       {
 00E5                   .dbline 166
 00E5           ;                                               response = 1;
 00E5 560101            mov [X+1],1
 00E8 560000            mov [X+0],0
 00EB                   .dbline 167
 00EB           ;                                       }
 00EB           L22:
 00EB                   .dbline 168
 00EB           ;                               }
 00EB           L20:
 00EB                   .dbline 169
 00EB           ;                       }
 00EB           L18:
 00EB                   .dbline 170
 00EB           ;               }
 00EB           L16:
 00EB                   .dbline 171
 00EB           ;       }
 00EB           L14:
 00EB                   .dbline 155
 00EB 62D000            mov REG[0xd0],>_TIMEOUT
 00EE 5101              mov A,[_TIMEOUT+1]
 00F0 1105              sub A,5
 00F2 5100              mov A,[_TIMEOUT]
 00F4 3180              xor A,-128
 00F6 1980              sbb A,(0 ^ 0x80)
 00F8 D00B              jnc L24
 00FA           X4:
 00FA 3D0000            cmp [X+0],0
 00FD B006              jnz X5
 00FF 3D0100            cmp [X+1],0
 0102 AFAD              jz L13
 0104           X5:
 0104           L24:
 0104                   .dbline 173
 0104           ;       
 0104           ;       RX_TIMEOUT_Stop();
 0104 10                push X
 0105 7C0000            xcall _RX_TIMEOUT_Stop
 0108 20                pop X
 0109                   .dbline 174
 0109           ;       TIMEOUT = 0;
 0109 62D000            mov REG[0xd0],>_TIMEOUT
 010C 550100            mov [_TIMEOUT+1],0
 010F 550000            mov [_TIMEOUT],0
 0112                   .dbline 175
 0112           ;       RX_TIMEOUT_Start();
 0112 10                push X
 0113 7C0000            xcall _RX_TIMEOUT_Start
 0116 20                pop X
 0117                   .dbline 177
 0117           ;       
 0117           ;       return response;
 0117 62D000            mov REG[0xd0],>__r0
 011A 5201              mov A,[X+1]
 011C 5300              mov [__r1],A
 011E 5200              mov A,[X+0]
 0120 5300              mov [__r0],A
 0122                   .dbline -2
 0122           L9:
 0122 38FE              add SP,-2
 0124 20                pop X
 0125                   .dbline 0 ; func end
 0125 7F                ret
 0126                   .dbsym l response 0 I
 0126                   .dbsym l module_id -5 I
 0126                   .dbend
 0126                   .dbfunc e assignID _assignID fI
 0126           ;        success -> X+0
 0126           ;    assigned_ID -> X-5
 0126           _assignID::
 0126                   .dbline -1
 0126 10                push X
 0127 4F                mov X,SP
 0128 3802              add SP,2
 012A                   .dbline 181
 012A           ; }
 012A           ; 
 012A           ; int assignID(int assigned_ID)
 012A           ; {
 012A                   .dbline 182
 012A           ;       int success = 0;                // Stores 0 on fail, 1 on success.
 012A 560100            mov [X+1],0
 012D 560000            mov [X+0],0
 0130                   .dbline 184
 0130           ;       
 0130           ;       configToggle(TX_MODE);  // Switch to TX mode.
 0130 5000              mov A,0
 0132 08                push A
 0133 08                push A
 0134 7C0C11            xcall _configToggle
 0137 38FE              add SP,-2
 0139                   .dbline 187
 0139           ; 
 0139           ;       // Transmit the assignment.
 0139           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0139 10                push X
 013A 50FC              mov A,-4
 013C 7C0000            xcall _TRANSMIT_PutChar
 013F 20                pop X
 0140                   .dbline 188
 0140           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0140 10                push X
 0141 50FC              mov A,-4
 0143 7C0000            xcall _TRANSMIT_PutChar
 0146 20                pop X
 0147                   .dbline 189
 0147           ;       TRANSMIT_PutChar(MASTER_ID);
 0147 10                push X
 0148 5000              mov A,0
 014A 7C0000            xcall _TRANSMIT_PutChar
 014D 20                pop X
 014E                   .dbline 190
 014E           ;       TRANSMIT_PutChar(BLANK_MODULE_ID);
 014E 10                push X
 014F 50FB              mov A,-5
 0151 7C0000            xcall _TRANSMIT_PutChar
 0154 20                pop X
 0155                   .dbline 191
 0155           ;       TRANSMIT_PutChar(ID_ASSIGNMENT);
 0155 10                push X
 0156 50C9              mov A,-55
 0158 7C0000            xcall _TRANSMIT_PutChar
 015B 20                pop X
 015C                   .dbline 192
 015C           ;       TRANSMIT_PutChar(assigned_ID);
 015C 62D000            mov REG[0xd0],>__r0
 015F 52FC              mov A,[X-4]
 0161 10                push X
 0162 7C0000            xcall _TRANSMIT_PutChar
 0165 20                pop X
 0166                   .dbline 193
 0166           ;       TRANSMIT_PutChar(END_TRANSMIT);
 0166 10                push X
 0167 50FD              mov A,-3
 0169 7C0000            xcall _TRANSMIT_PutChar
 016C 20                pop X
 016D                   .dbline 194
 016D           ;       TRANSMIT_PutChar(END_TRANSMIT);
 016D 10                push X
 016E 50FD              mov A,-3
 0170 7C0000            xcall _TRANSMIT_PutChar
 0173 20                pop X
 0174           L26:
 0174                   .dbline 197
 0174           ;       
 0174           ;       // Wait for the transmission to finish.
 0174           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 0174           L27:
 0174                   .dbline 197
 0174 10                push X
 0175 7C0000            xcall _TRANSMIT_bReadTxStatus
 0178 62D000            mov REG[0xd0],>__r0
 017B 20                pop X
 017C 5300              mov [__r0],A
 017E 470020            tst [__r0],32
 0181 AFF2              jz L26
 0183                   .dbline 199
 0183           ;       
 0183           ;       xmitWait();
 0183 7C0F00            xcall _xmitWait
 0186                   .dbline 201
 0186           ;       
 0186           ;       configToggle(RX_MODE);  // Switch back to receive mode.
 0186 5000              mov A,0
 0188 08                push A
 0189 5001              mov A,1
 018B 08                push A
 018C 7C0C11            xcall _configToggle
 018F 38FE              add SP,-2
 0191                   .dbline 203
 0191           ;       
 0191           ;       RX_TIMEOUT_Stop();
 0191 10                push X
 0192 7C0000            xcall _RX_TIMEOUT_Stop
 0195 20                pop X
 0196                   .dbline 204
 0196           ;       TIMEOUT = 0;
 0196 62D000            mov REG[0xd0],>_TIMEOUT
 0199 550100            mov [_TIMEOUT+1],0
 019C 550000            mov [_TIMEOUT],0
 019F                   .dbline 205
 019F           ;       RX_TIMEOUT_Start();
 019F 10                push X
 01A0 7C0000            xcall _RX_TIMEOUT_Start
 01A3 20                pop X
 01A4 803C              xjmp L30
 01A6           L29:
 01A6                   .dbline 208
 01A6           ;       
 01A6           ;       while((TIMEOUT < RX_TIMEOUT_DURATION) && (!success))
 01A6           ;       {
 01A6                   .dbline 209
 01A6           ;               if(validTransmission())
 01A6 91C5              xcall _validTransmission
 01A8 62D000            mov REG[0xd0],>__r0
 01AB 3C0000            cmp [__r0],0
 01AE B006              jnz X6
 01B0 3C0000            cmp [__r1],0
 01B3 A02D              jz L32
 01B5           X6:
 01B5                   .dbline 210
 01B5           ;               {
 01B5                   .dbline 211
 01B5           ;                       if(COMMAND_TYPE == ID_ASSIGN_OK)        // This is the response we are looking for.
 01B5 62D000            mov REG[0xd0],>_COMMAND_TYPE
 01B8 3C00CA            cmp [_COMMAND_TYPE],-54
 01BB B025              jnz L34
 01BD                   .dbline 212
 01BD           ;                       {
 01BD                   .dbline 214
 01BD           ;                               // If this is for me, check who it was from.
 01BD           ;                               if(COMMAND_DESTINATION == MASTER_ID)
 01BD 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 01C0 3C0000            cmp [_COMMAND_DESTINATION],0
 01C3 B01D              jnz L36
 01C5                   .dbline 215
 01C5           ;                               {
 01C5                   .dbline 216
 01C5           ;                                       if(COMMAND_SOURCE == assigned_ID)
 01C5 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 01C8 5100              mov A,[_COMMAND_SOURCE]
 01CA 62D000            mov REG[0xd0],>__r0
 01CD 5300              mov [__r1],A
 01CF 5000              mov A,0
 01D1 3BFB              cmp A,[X-5]
 01D3 B00D              jnz L38
 01D5 5100              mov A,[__r1]
 01D7 3BFC              cmp A,[X-4]
 01D9 B007              jnz L38
 01DB           X7:
 01DB                   .dbline 217
 01DB           ;                                       {
 01DB                   .dbline 218
 01DB           ;                                               success = 1;
 01DB 560101            mov [X+1],1
 01DE 560000            mov [X+0],0
 01E1                   .dbline 219
 01E1           ;                                       }
 01E1           L38:
 01E1                   .dbline 220
 01E1           ;                               }
 01E1           L36:
 01E1                   .dbline 221
 01E1           ;                       }
 01E1           L34:
 01E1                   .dbline 222
 01E1           ;               }
 01E1           L32:
 01E1                   .dbline 223
 01E1           ;       }
 01E1           L30:
 01E1                   .dbline 207
 01E1 62D000            mov REG[0xd0],>_TIMEOUT
 01E4 5101              mov A,[_TIMEOUT+1]
 01E6 1105              sub A,5
 01E8 5100              mov A,[_TIMEOUT]
 01EA 3180              xor A,-128
 01EC 1980              sbb A,(0 ^ 0x80)
 01EE D00B              jnc L40
 01F0           X8:
 01F0 3D0000            cmp [X+0],0
 01F3 B006              jnz X9
 01F5 3D0100            cmp [X+1],0
 01F8 AFAD              jz L29
 01FA           X9:
 01FA           L40:
 01FA                   .dbline 225
 01FA           ;       
 01FA           ;       RX_TIMEOUT_Stop();
 01FA 10                push X
 01FB 7C0000            xcall _RX_TIMEOUT_Stop
 01FE 20                pop X
 01FF                   .dbline 226
 01FF           ;       TIMEOUT = 0;
 01FF 62D000            mov REG[0xd0],>_TIMEOUT
 0202 550100            mov [_TIMEOUT+1],0
 0205 550000            mov [_TIMEOUT],0
 0208                   .dbline 227
 0208           ;       RX_TIMEOUT_Start();
 0208 10                push X
 0209 7C0000            xcall _RX_TIMEOUT_Start
 020C 20                pop X
 020D                   .dbline 229
 020D           ;       
 020D           ;       return success;
 020D 62D000            mov REG[0xd0],>__r0
 0210 5201              mov A,[X+1]
 0212 5300              mov [__r1],A
 0214 5200              mov A,[X+0]
 0216 5300              mov [__r0],A
 0218                   .dbline -2
 0218           L25:
 0218 38FE              add SP,-2
 021A 20                pop X
 021B                   .dbline 0 ; func end
 021B 7F                ret
 021C                   .dbsym l success 0 I
 021C                   .dbsym l assigned_ID -5 I
 021C                   .dbend
 021C                   .dbfunc e clearConfig _clearConfig fI
 021C           ;       response -> X+0
 021C           ;      module_id -> X-5
 021C           _clearConfig::
 021C                   .dbline -1
 021C 10                push X
 021D 4F                mov X,SP
 021E 3802              add SP,2
 0220                   .dbline 233
 0220           ; }
 0220           ; 
 0220           ; int clearConfig(int module_id)
 0220           ; {
 0220                   .dbline 234
 0220           ;       int response = 0;
 0220 560100            mov [X+1],0
 0223 560000            mov [X+0],0
 0226                   .dbline 236
 0226           ;       
 0226           ;       configToggle(TX_MODE);  // Toggle into TX mode.
 0226 5000              mov A,0
 0228 08                push A
 0229 08                push A
 022A 7C0C11            xcall _configToggle
 022D 38FE              add SP,-2
 022F                   .dbline 239
 022F           ;                       
 022F           ;       // Transmit a hello.
 022F           ;       TRANSMIT_PutChar(START_TRANSMIT);
 022F 10                push X
 0230 50FC              mov A,-4
 0232 7C0000            xcall _TRANSMIT_PutChar
 0235 20                pop X
 0236                   .dbline 240
 0236           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0236 10                push X
 0237 50FC              mov A,-4
 0239 7C0000            xcall _TRANSMIT_PutChar
 023C 20                pop X
 023D                   .dbline 241
 023D           ;       TRANSMIT_PutChar(MASTER_ID);
 023D 10                push X
 023E 5000              mov A,0
 0240 7C0000            xcall _TRANSMIT_PutChar
 0243 20                pop X
 0244                   .dbline 242
 0244           ;       TRANSMIT_PutChar(module_id);
 0244 62D000            mov REG[0xd0],>__r0
 0247 52FC              mov A,[X-4]
 0249 10                push X
 024A 7C0000            xcall _TRANSMIT_PutChar
 024D 20                pop X
 024E                   .dbline 243
 024E           ;       TRANSMIT_PutChar(CLEAR_CONFIG);
 024E 10                push X
 024F 50CC              mov A,-52
 0251 7C0000            xcall _TRANSMIT_PutChar
 0254 20                pop X
 0255                   .dbline 244
 0255           ;       TRANSMIT_PutChar(END_TRANSMIT);
 0255 10                push X
 0256 50FD              mov A,-3
 0258 7C0000            xcall _TRANSMIT_PutChar
 025B 20                pop X
 025C                   .dbline 245
 025C           ;       TRANSMIT_PutChar(END_TRANSMIT);
 025C 10                push X
 025D 50FD              mov A,-3
 025F 7C0000            xcall _TRANSMIT_PutChar
 0262 20                pop X
 0263           L42:
 0263                   .dbline 248
 0263           ;       
 0263           ;       // Wait for the transmission to finish.
 0263           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 0263           L43:
 0263                   .dbline 248
 0263 10                push X
 0264 7C0000            xcall _TRANSMIT_bReadTxStatus
 0267 62D000            mov REG[0xd0],>__r0
 026A 20                pop X
 026B 5300              mov [__r0],A
 026D 470020            tst [__r0],32
 0270 AFF2              jz L42
 0272                   .dbline 250
 0272           ;       
 0272           ;       xmitWait();
 0272 7C0F00            xcall _xmitWait
 0275                   .dbline 252
 0275           ;       
 0275           ;       configToggle(RX_MODE);  // Listen for the response.
 0275 5000              mov A,0
 0277 08                push A
 0278 5001              mov A,1
 027A 08                push A
 027B 7C0C11            xcall _configToggle
 027E 38FE              add SP,-2
 0280                   .dbline 254
 0280           ;       
 0280           ;       if(module_id != BROADCAST)
 0280 3DFB00            cmp [X-5],0
 0283 B006              jnz X10
 0285 3DFCFE            cmp [X-4],-2
 0288 A07D              jz L45
 028A           X10:
 028A                   .dbline 255
 028A           ;       {
 028A                   .dbline 256
 028A           ;               RX_TIMEOUT_Stop();
 028A 10                push X
 028B 7C0000            xcall _RX_TIMEOUT_Stop
 028E 20                pop X
 028F                   .dbline 257
 028F           ;               TIMEOUT = 0;
 028F 62D000            mov REG[0xd0],>_TIMEOUT
 0292 550100            mov [_TIMEOUT+1],0
 0295 550000            mov [_TIMEOUT],0
 0298                   .dbline 258
 0298           ;               RX_TIMEOUT_Start();
 0298 10                push X
 0299 7C0000            xcall _RX_TIMEOUT_Start
 029C 20                pop X
 029D 803C              xjmp L48
 029F           L47:
 029F                   .dbline 261
 029F           ;               
 029F           ;               while((TIMEOUT < RX_TIMEOUT_DURATION) && (!response))
 029F           ;               {
 029F                   .dbline 262
 029F           ;                       if(validTransmission())
 029F 90CC              xcall _validTransmission
 02A1 62D000            mov REG[0xd0],>__r0
 02A4 3C0000            cmp [__r0],0
 02A7 B006              jnz X11
 02A9 3C0000            cmp [__r1],0
 02AC A02D              jz L50
 02AE           X11:
 02AE                   .dbline 263
 02AE           ;                       {
 02AE                   .dbline 264
 02AE           ;                               if(COMMAND_TYPE == CONFIG_CLEARED)      // This is the response we are looking for.
 02AE 62D000            mov REG[0xd0],>_COMMAND_TYPE
 02B1 3C00CD            cmp [_COMMAND_TYPE],-51
 02B4 B025              jnz L52
 02B6                   .dbline 265
 02B6           ;                               {
 02B6                   .dbline 267
 02B6           ;                                       // If this is for me, check who it was from.
 02B6           ;                                       if(COMMAND_DESTINATION == MASTER_ID)
 02B6 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 02B9 3C0000            cmp [_COMMAND_DESTINATION],0
 02BC B01D              jnz L54
 02BE                   .dbline 268
 02BE           ;                                       {
 02BE                   .dbline 269
 02BE           ;                                               if(COMMAND_SOURCE == module_id)
 02BE 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 02C1 5100              mov A,[_COMMAND_SOURCE]
 02C3 62D000            mov REG[0xd0],>__r0
 02C6 5300              mov [__r1],A
 02C8 5000              mov A,0
 02CA 3BFB              cmp A,[X-5]
 02CC B00D              jnz L56
 02CE 5100              mov A,[__r1]
 02D0 3BFC              cmp A,[X-4]
 02D2 B007              jnz L56
 02D4           X12:
 02D4                   .dbline 270
 02D4           ;                                               {
 02D4                   .dbline 271
 02D4           ;                                                       response = 1;
 02D4 560101            mov [X+1],1
 02D7 560000            mov [X+0],0
 02DA                   .dbline 272
 02DA           ;                                               }
 02DA           L56:
 02DA                   .dbline 273
 02DA           ;                                       }
 02DA           L54:
 02DA                   .dbline 274
 02DA           ;                               }
 02DA           L52:
 02DA                   .dbline 275
 02DA           ;                       }
 02DA           L50:
 02DA                   .dbline 276
 02DA           ;               }
 02DA           L48:
 02DA                   .dbline 260
 02DA 62D000            mov REG[0xd0],>_TIMEOUT
 02DD 5101              mov A,[_TIMEOUT+1]
 02DF 1105              sub A,5
 02E1 5100              mov A,[_TIMEOUT]
 02E3 3180              xor A,-128
 02E5 1980              sbb A,(0 ^ 0x80)
 02E7 D00B              jnc L58
 02E9           X13:
 02E9 3D0000            cmp [X+0],0
 02EC B006              jnz X14
 02EE 3D0100            cmp [X+1],0
 02F1 AFAD              jz L47
 02F3           X14:
 02F3           L58:
 02F3                   .dbline 278
 02F3           ;               
 02F3           ;               RX_TIMEOUT_Stop();
 02F3 10                push X
 02F4 7C0000            xcall _RX_TIMEOUT_Stop
 02F7 20                pop X
 02F8                   .dbline 279
 02F8           ;               TIMEOUT = 0;
 02F8 62D000            mov REG[0xd0],>_TIMEOUT
 02FB 550100            mov [_TIMEOUT+1],0
 02FE 550000            mov [_TIMEOUT],0
 0301                   .dbline 280
 0301           ;               RX_TIMEOUT_Start();
 0301 10                push X
 0302 7C0000            xcall _RX_TIMEOUT_Start
 0305 20                pop X
 0306                   .dbline 281
 0306           ;       }
 0306           L45:
 0306                   .dbline 283
 0306           ;       
 0306           ;       return response;
 0306 62D000            mov REG[0xd0],>__r0
 0309 5201              mov A,[X+1]
 030B 5300              mov [__r1],A
 030D 5200              mov A,[X+0]
 030F 5300              mov [__r0],A
 0311                   .dbline -2
 0311           L41:
 0311 38FE              add SP,-2
 0313 20                pop X
 0314                   .dbline 0 ; func end
 0314 7F                ret
 0315                   .dbsym l response 0 I
 0315                   .dbsym l module_id -5 I
 0315                   .dbend
 0315                   .dbfunc e sayHello _sayHello fV
 0315           _sayHello::
 0315                   .dbline -1
 0315                   .dbline 288
 0315           ; }
 0315           ; 
 0315           ; // This function transmits a hello message.
 0315           ; void sayHello(void)
 0315           ; {
 0315                   .dbline 289
 0315           ;       configToggle(TX_MODE);                          // Toggle into TX mode.
 0315 5000              mov A,0
 0317 08                push A
 0318 08                push A
 0319 7C0C11            xcall _configToggle
 031C 38FE              add SP,-2
 031E                   .dbline 292
 031E           ;                       
 031E           ;       // Transmit a hello.
 031E           ;       TRANSMIT_PutChar(START_TRANSMIT);
 031E 10                push X
 031F 50FC              mov A,-4
 0321 7C0000            xcall _TRANSMIT_PutChar
 0324 20                pop X
 0325                   .dbline 293
 0325           ;       TRANSMIT_PutChar(START_TRANSMIT);
 0325 10                push X
 0326 50FC              mov A,-4
 0328 7C0000            xcall _TRANSMIT_PutChar
 032B 20                pop X
 032C                   .dbline 294
 032C           ;       TRANSMIT_PutChar(MASTER_ID);
 032C 10                push X
 032D 5000              mov A,0
 032F 7C0000            xcall _TRANSMIT_PutChar
 0332 20                pop X
 0333                   .dbline 295
 0333           ;       TRANSMIT_PutChar(BLANK_MODULE_ID);
 0333 10                push X
 0334 50FB              mov A,-5
 0336 7C0000            xcall _TRANSMIT_PutChar
 0339 20                pop X
 033A                   .dbline 296
 033A           ;       TRANSMIT_PutChar(HELLO_BYTE);
 033A 10                push X
 033B 50C8              mov A,-56
 033D 7C0000            xcall _TRANSMIT_PutChar
 0340 20                pop X
 0341                   .dbline 297
 0341           ;       TRANSMIT_PutChar(END_TRANSMIT);
 0341 10                push X
 0342 50FD              mov A,-3
 0344 7C0000            xcall _TRANSMIT_PutChar
 0347 20                pop X
 0348                   .dbline 298
 0348           ;       TRANSMIT_PutChar(END_TRANSMIT);
 0348 10                push X
 0349 50FD              mov A,-3
 034B 7C0000            xcall _TRANSMIT_PutChar
 034E 20                pop X
 034F           L60:
 034F                   .dbline 301
 034F           ;       
 034F           ;       // Wait for the transmission to finish.
 034F           ;       while(!( TRANSMIT_bReadTxStatus() & TRANSMIT_TX_COMPLETE));
 034F           L61:
 034F                   .dbline 301
 034F 10                push X
 0350 7C0000            xcall _TRANSMIT_bReadTxStatus
 0353 62D000            mov REG[0xd0],>__r0
 0356 20                pop X
 0357 5300              mov [__r0],A
 0359 470020            tst [__r0],32
 035C AFF2              jz L60
 035E                   .dbline 303
 035E           ;       
 035E           ;       xmitWait();
 035E 7C0F00            xcall _xmitWait
 0361                   .dbline 305
 0361           ;       
 0361           ;       configToggle(RX_MODE);                          // Listen for the response.
 0361 5000              mov A,0
 0363 08                push A
 0364 5001              mov A,1
 0366 08                push A
 0367 7C0C11            xcall _configToggle
 036A 38FE              add SP,-2
 036C                   .dbline -2
 036C           L59:
 036C                   .dbline 0 ; func end
 036C 7F                ret
 036D                   .dbend
 036D                   .dbfunc e validTransmission _validTransmission fI
 036D           ; valid_transmit -> X+3
 036D           ;              i -> X+1
 036D           ;       tempByte -> X+0
 036D           _validTransmission::
 036D                   .dbline -1
 036D 10                push X
 036E 4F                mov X,SP
 036F 3805              add SP,5
 0371                   .dbline 310
 0371           ; }
 0371           ; 
 0371           ; // This function returns whether or not a valid transmission has been received.
 0371           ; int validTransmission(void)
 0371           ; {
 0371                   .dbline 311
 0371           ;       int valid_transmit = 0;
 0371 560400            mov [X+4],0
 0374 560300            mov [X+3],0
 0377                   .dbline 312
 0377           ;       int i = 0;
 0377 560200            mov [X+2],0
 037A 560100            mov [X+1],0
 037D                   .dbline 313
 037D           ;       char tempByte = 0;
 037D 560000            mov [X+0],0
 0380 80C2              xjmp L65
 0382           L64:
 0382                   .dbline 316
 0382           ;       
 0382           ;       while(TIMEOUT < RX_TIMEOUT_DURATION)
 0382           ;       {
 0382                   .dbline 317
 0382           ;               if(RECEIVE_cReadChar() == START_TRANSMIT)
 0382 10                push X
 0383 7C0000            xcall _RECEIVE_cReadChar
 0386 62D000            mov REG[0xd0],>__r0
 0389 20                pop X
 038A 39FC              cmp A,-4
 038C B0B6              jnz L67
 038E                   .dbline 318
 038E           ;               {
 038E 80A5              xjmp L70
 0390           L69:
 0390                   .dbline 320
 0390           ;                       while(TIMEOUT < RX_TIMEOUT_DURATION)
 0390           ;                       {
 0390                   .dbline 321
 0390           ;                               if(RECEIVE_cReadChar() == START_TRANSMIT)
 0390 10                push X
 0391 7C0000            xcall _RECEIVE_cReadChar
 0394 62D000            mov REG[0xd0],>__r0
 0397 20                pop X
 0398 39FC              cmp A,-4
 039A B099              jnz L72
 039C                   .dbline 322
 039C           ;                               {
 039C 8088              xjmp L75
 039E           L74:
 039E                   .dbline 324
 039E           ;                                       while(TIMEOUT < RX_TIMEOUT_DURATION)
 039E           ;                                       {
 039E                   .dbline 325
 039E           ;                                               if(tempByte = RECEIVE_cReadChar())
 039E 10                push X
 039F 7C0000            xcall _RECEIVE_cReadChar
 03A2 20                pop X
 03A3 5400              mov [X+0],A
 03A5 3900              cmp A,0
 03A7 A07D              jz L77
 03A9                   .dbline 326
 03A9           ;                                               {
 03A9                   .dbline 327
 03A9           ;                                                       COMMAND_SOURCE = tempByte;
 03A9 5200              mov A,[X+0]
 03AB 62D000            mov REG[0xd0],>_COMMAND_SOURCE
 03AE 5300              mov [_COMMAND_SOURCE],A
 03B0 8065              xjmp L80
 03B2           L79:
 03B2                   .dbline 330
 03B2           ;                                                       
 03B2           ;                                                       while(TIMEOUT < RX_TIMEOUT_DURATION)
 03B2           ;                                                       {
 03B2                   .dbline 331
 03B2           ;                                                               if(tempByte = RECEIVE_cReadChar())
 03B2 10                push X
 03B3 7C0000            xcall _RECEIVE_cReadChar
 03B6 62D000            mov REG[0xd0],>__r0
 03B9 20                pop X
 03BA 5400              mov [X+0],A
 03BC 3900              cmp A,0
 03BE A057              jz L82
 03C0                   .dbline 332
 03C0           ;                                                               {
 03C0                   .dbline 333
 03C0           ;                                                                       if(tempByte >= HELLO_BYTE)
 03C0 3D00C8            cmp [X+0],-56
 03C3 C052              jc L84
 03C5           X15:
 03C5                   .dbline 334
 03C5           ;                                                                       {
 03C5                   .dbline 335
 03C5           ;                                                                               COMMAND_TYPE = tempByte;
 03C5 5200              mov A,[X+0]
 03C7 62D000            mov REG[0xd0],>_COMMAND_TYPE
 03CA 5300              mov [_COMMAND_TYPE],A
 03CC 803A              xjmp L87
 03CE           L86:
 03CE                   .dbline 338
 03CE           ;                                                                               
 03CE           ;                                                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 03CE           ;                                                                               {
 03CE                   .dbline 339
 03CE           ;                                                                                       if(tempByte = RECEIVE_cReadChar())
 03CE 10                push X
 03CF 7C0000            xcall _RECEIVE_cReadChar
 03D2 62D000            mov REG[0xd0],>__r0
 03D5 20                pop X
 03D6 5400              mov [X+0],A
 03D8 3900              cmp A,0
 03DA A02C              jz L89
 03DC                   .dbline 340
 03DC           ;                                                                                       {
 03DC                   .dbline 341
 03DC           ;                                                                                               if(tempByte != END_TRANSMIT)
 03DC 3D00FD            cmp [X+0],-3
 03DF A018              jz L91
 03E1                   .dbline 342
 03E1           ;                                                                                               {
 03E1                   .dbline 343
 03E1           ;                                                                                                       PARAM[i] = tempByte;
 03E1 5202              mov A,[X+2]
 03E3 0100              add A,<_PARAM
 03E5 5300              mov [__r1],A
 03E7 5201              mov A,[X+1]
 03E9 0900              adc A,>_PARAM
 03EB 60D5              mov REG[0xd5],A
 03ED 5200              mov A,[X+0]
 03EF 3F00              mvi [__r1],A
 03F1                   .dbline 344
 03F1           ;                                                                                                       i++;
 03F1 7702              inc [X+2]
 03F3 0F0100            adc [X+1],0
 03F6                   .dbline 345
 03F6           ;                                                                                               }
 03F6 8010              xjmp L92
 03F8           L91:
 03F8                   .dbline 347
 03F8           ;                                                                                               else
 03F8           ;                                                                                               {
 03F8                   .dbline 348
 03F8           ;                                                                                                       valid_transmit = 1;
 03F8 560401            mov [X+4],1
 03FB 560300            mov [X+3],0
 03FE                   .dbline 349
 03FE           ;                                                                                                       TIMEOUT = RX_TIMEOUT_DURATION;
 03FE 62D000            mov REG[0xd0],>_TIMEOUT
 0401 550105            mov [_TIMEOUT+1],5
 0404 550000            mov [_TIMEOUT],0
 0407                   .dbline 350
 0407           ;                                                                                               }
 0407           L92:
 0407                   .dbline 351
 0407           ;                                                                                       }
 0407           L89:
 0407                   .dbline 352
 0407           ;                                                                               }
 0407           L87:
 0407                   .dbline 337
 0407 62D000            mov REG[0xd0],>_TIMEOUT
 040A 5101              mov A,[_TIMEOUT+1]
 040C 1105              sub A,5
 040E 5100              mov A,[_TIMEOUT]
 0410 3180              xor A,-128
 0412 1980              sbb A,(0 ^ 0x80)
 0414 CFB9              jc L86
 0416           X16:
 0416                   .dbline 353
 0416           ;                                                                       }
 0416           L84:
 0416                   .dbline 354
 0416           ;                                                               }
 0416           L82:
 0416                   .dbline 355
 0416           ;                                                       }
 0416           L80:
 0416                   .dbline 329
 0416 62D000            mov REG[0xd0],>_TIMEOUT
 0419 5101              mov A,[_TIMEOUT+1]
 041B 1105              sub A,5
 041D 5100              mov A,[_TIMEOUT]
 041F 3180              xor A,-128
 0421 1980              sbb A,(0 ^ 0x80)
 0423 CF8E              jc L79
 0425           X17:
 0425                   .dbline 356
 0425           ;                                               }
 0425           L77:
 0425                   .dbline 357
 0425           ;                                       }
 0425           L75:
 0425                   .dbline 323
 0425 62D000            mov REG[0xd0],>_TIMEOUT
 0428 5101              mov A,[_TIMEOUT+1]
 042A 1105              sub A,5
 042C 5100              mov A,[_TIMEOUT]
 042E 3180              xor A,-128
 0430 1980              sbb A,(0 ^ 0x80)
 0432 CF6B              jc L74
 0434           X18:
 0434                   .dbline 358
 0434           ;                               }
 0434           L72:
 0434                   .dbline 359
 0434           ;                       }
 0434           L70:
 0434                   .dbline 319
 0434 62D000            mov REG[0xd0],>_TIMEOUT
 0437 5101              mov A,[_TIMEOUT+1]
 0439 1105              sub A,5
 043B 5100              mov A,[_TIMEOUT]
 043D 3180              xor A,-128
 043F 1980              sbb A,(0 ^ 0x80)
 0441 CF4E              jc L69
 0443           X19:
 0443                   .dbline 360
 0443           ;               }
 0443           L67:
 0443                   .dbline 361
 0443           ;       }
 0443           L65:
 0443                   .dbline 315
 0443 62D000            mov REG[0xd0],>_TIMEOUT
 0446 5101              mov A,[_TIMEOUT+1]
 0448 1105              sub A,5
 044A 5100              mov A,[_TIMEOUT]
 044C 3180              xor A,-128
 044E 1980              sbb A,(0 ^ 0x80)
 0450 CF31              jc L64
 0452           X20:
 0452                   .dbline 363
 0452           ;       
 0452           ;       return valid_transmit;
 0452 62D000            mov REG[0xd0],>__r0
 0455 5204              mov A,[X+4]
 0457 5300              mov [__r1],A
 0459 5203              mov A,[X+3]
 045B 5300              mov [__r0],A
 045D                   .dbline -2
 045D           L63:
 045D 38FB              add SP,-5
 045F 20                pop X
 0460                   .dbline 0 ; func end
 0460 7F                ret
 0461                   .dbsym l valid_transmit 3 I
 0461                   .dbsym l i 1 I
 0461                   .dbsym l tempByte 0 c
 0461                   .dbend
 0461                   .dbfunc e decodeTransmission _decodeTransmission fV
 0461           ;          speed -> X+10
 0461           ;          angle -> X+8
 0461           ;       tempByte -> X+7
 0461           ;          total -> X+5
 0461           ;             ID -> X+4
 0461           ;   runningTotal -> X+2
 0461           ;          param -> X+0
 0461           _decodeTransmission::
 0461                   .dbline -1
 0461 10                push X
 0462 4F                mov X,SP
 0463 380C              add SP,12
 0465                   .dbline 368
 0465           ; }
 0465           ; 
 0465           ; // This function decodes the transmission and takes the correct action.
 0465           ; void decodeTransmission(void)
 0465           ; {
 0465                   .dbline 370
 0465           ;       char* param;
 0465           ;       char ID = 0;
 0465 560400            mov [X+4],0
 0468                   .dbline 374
 0468           ;       char tempByte;
 0468           ;       char angle[2];
 0468           ;       char speed[2];
 0468           ;       int total = 0;
 0468 560600            mov [X+6],0
 046B 560500            mov [X+5],0
 046E                   .dbline 375
 046E           ;       int runningTotal = 0;
 046E 560300            mov [X+3],0
 0471 560200            mov [X+2],0
 0474                   .dbline 377
 0474           ;       
 0474           ;       if(param = COMP_SERIAL_szGetParam())
 0474 10                push X
 0475 7C0000            xcall _COMP_SERIAL_szGetParam
 0478 62D000            mov REG[0xd0],>__r0
 047B 5300              mov [__r0],A
 047D 5A00              mov [__r1],X
 047F 20                pop X
 0480 5100              mov A,[__r1]
 0482 5401              mov [X+1],A
 0484 5100              mov A,[__r0]
 0486 5400              mov [X+0],A
 0488 3C0000            cmp [__r0],0
 048B B006              jnz X21
 048D 3C0000            cmp [__r1],0
 0490 A601              jz L94
 0492           X21:
 0492                   .dbline 378
 0492           ;       {
 0492                   .dbline 379
 0492           ;               if((param[0] == 'x') || (param[0] == 'X'))
 0492 62D000            mov REG[0xd0],>__r0
 0495 5201              mov A,[X+1]
 0497 5300              mov [__r1],A
 0499 5200              mov A,[X+0]
 049B 60D4              mov REG[0xd4],A
 049D 3E00              mvi A,[__r1]
 049F 5300              mov [__r1],A
 04A1 550000            mov [__r0],0
 04A4 3C0000            cmp [__r0],0
 04A7 B005              jnz X22
 04A9 3978              cmp A,120
 04AB A00E              jz L98
 04AD           X22:
 04AD 62D000            mov REG[0xd0],>__r0
 04B0 3C0000            cmp [__r0],0
 04B3 B011              jnz L96
 04B5 3C0058            cmp [__r1],88
 04B8 B00C              jnz L96
 04BA           X23:
 04BA           L98:
 04BA                   .dbline 380
 04BA           ;               {
 04BA                   .dbline 382
 04BA           ;                       // Reset
 04BA           ;                       NUM_MODULES = 0;
 04BA 62D000            mov REG[0xd0],>_NUM_MODULES
 04BD 550100            mov [_NUM_MODULES+1],0
 04C0 550000            mov [_NUM_MODULES],0
 04C3                   .dbline 383
 04C3           ;               }
 04C3 85CE              xjmp L97
 04C5           L96:
 04C5                   .dbline 384
 04C5           ;               else if((param[0] == 'n') || (param[0] == 'N'))
 04C5 62D000            mov REG[0xd0],>__r0
 04C8 5201              mov A,[X+1]
 04CA 5300              mov [__r1],A
 04CC 5200              mov A,[X+0]
 04CE 60D4              mov REG[0xd4],A
 04D0 3E00              mvi A,[__r1]
 04D2 5300              mov [__r1],A
 04D4 550000            mov [__r0],0
 04D7 3C0000            cmp [__r0],0
 04DA B005              jnz X24
 04DC 396E              cmp A,110
 04DE A00E              jz L101
 04E0           X24:
 04E0 62D000            mov REG[0xd0],>__r0
 04E3 3C0000            cmp [__r0],0
 04E6 B035              jnz L99
 04E8 3C004E            cmp [__r1],78
 04EB B030              jnz L99
 04ED           X25:
 04ED           L101:
 04ED                   .dbline 385
 04ED           ;               {
 04ED                   .dbline 386
 04ED           ;                       itoa(param,NUM_MODULES,10);
 04ED 5000              mov A,0
 04EF 08                push A
 04F0 500A              mov A,10
 04F2 08                push A
 04F3 62D000            mov REG[0xd0],>_NUM_MODULES
 04F6 5100              mov A,[_NUM_MODULES]
 04F8 08                push A
 04F9 5101              mov A,[_NUM_MODULES+1]
 04FB 08                push A
 04FC 5200              mov A,[X+0]
 04FE 08                push A
 04FF 5201              mov A,[X+1]
 0501 08                push A
 0502 7C0000            xcall _itoa
 0505 38FA              add SP,-6
 0507                   .dbline 387
 0507           ;                       COMP_SERIAL_PutString(param);
 0507 10                push X
 0508 5200              mov A,[X+0]
 050A 08                push A
 050B 5201              mov A,[X+1]
 050D 5C                mov X,A
 050E 18                pop A
 050F 7C0000            xcall _COMP_SERIAL_PutString
 0512 20                pop X
 0513                   .dbline 388
 0513           ;                       COMP_SERIAL_PutChar('\n');
 0513 10                push X
 0514 500A              mov A,10
 0516 7C0000            xcall _COMP_SERIAL_PutChar
 0519 20                pop X
 051A                   .dbline 389
 051A           ;               }
 051A 8577              xjmp L100
 051C           L99:
 051C                   .dbline 390
 051C           ;               else if((param[0] == 'w') || (param[0] == 'W'))
 051C 62D000            mov REG[0xd0],>__r0
 051F 5201              mov A,[X+1]
 0521 5300              mov [__r1],A
 0523 5200              mov A,[X+0]
 0525 60D4              mov REG[0xd4],A
 0527 3E00              mvi A,[__r1]
 0529 5300              mov [__r1],A
 052B 550000            mov [__r0],0
 052E 3C0000            cmp [__r0],0
 0531 B005              jnz X26
 0533 3977              cmp A,119
 0535 A00E              jz L104
 0537           X26:
 0537 62D000            mov REG[0xd0],>__r0
 053A 3C0000            cmp [__r0],0
 053D B214              jnz L102
 053F 3C0057            cmp [__r1],87
 0542 B20F              jnz L102
 0544           X27:
 0544           L104:
 0544                   .dbline 391
 0544           ;               {
 0544                   .dbline 392
 0544           ;                       if(param = COMP_SERIAL_szGetParam())
 0544 10                push X
 0545 7C0000            xcall _COMP_SERIAL_szGetParam
 0548 62D000            mov REG[0xd0],>__r0
 054B 5300              mov [__r0],A
 054D 5A00              mov [__r1],X
 054F 20                pop X
 0550 5100              mov A,[__r1]
 0552 5401              mov [X+1],A
 0554 5100              mov A,[__r0]
 0556 5400              mov [X+0],A
 0558 3C0000            cmp [__r0],0
 055B B006              jnz X28
 055D 3C0000            cmp [__r1],0
 0560 A531              jz L103
 0562           X28:
 0562                   .dbline 393
 0562           ;                       {
 0562                   .dbline 394
 0562           ;                               ID = atoi(param);
 0562 5200              mov A,[X+0]
 0564 08                push A
 0565 5201              mov A,[X+1]
 0567 08                push A
 0568 7C0000            xcall _atoi
 056B 38FE              add SP,-2
 056D 62D000            mov REG[0xd0],>__r0
 0570 5100              mov A,[__r1]
 0572 5404              mov [X+4],A
 0574                   .dbline 396
 0574           ;                               
 0574           ;                               if(param = COMP_SERIAL_szGetParam())
 0574 10                push X
 0575 7C0000            xcall _COMP_SERIAL_szGetParam
 0578 62D000            mov REG[0xd0],>__r0
 057B 5300              mov [__r0],A
 057D 5A00              mov [__r1],X
 057F 20                pop X
 0580 5100              mov A,[__r1]
 0582 5401              mov [X+1],A
 0584 5100              mov A,[__r0]
 0586 5400              mov [X+0],A
 0588 3C0000            cmp [__r0],0
 058B B006              jnz X29
 058D 3C0000            cmp [__r1],0
 0590 A501              jz L103
 0592           X29:
 0592                   .dbline 397
 0592           ;                               {
 0592                   .dbline 398
 0592           ;                                       if((param[0] == 'a') || (param[0] == 'A'))
 0592 62D000            mov REG[0xd0],>__r0
 0595 5201              mov A,[X+1]
 0597 5300              mov [__r1],A
 0599 5200              mov A,[X+0]
 059B 60D4              mov REG[0xd4],A
 059D 3E00              mvi A,[__r1]
 059F 5300              mov [__r1],A
 05A1 550000            mov [__r0],0
 05A4 3C0000            cmp [__r0],0
 05A7 B005              jnz X30
 05A9 3961              cmp A,97
 05AB A00E              jz L111
 05AD           X30:
 05AD 62D000            mov REG[0xd0],>__r0
 05B0 3C0000            cmp [__r0],0
 05B3 B084              jnz L109
 05B5 3C0041            cmp [__r1],65
 05B8 B07F              jnz L109
 05BA           X31:
 05BA           L111:
 05BA                   .dbline 399
 05BA           ;                                       {
 05BA                   .dbline 400
 05BA           ;                                               if(param = COMP_SERIAL_szGetParam())
 05BA 10                push X
 05BB 7C0000            xcall _COMP_SERIAL_szGetParam
 05BE 62D000            mov REG[0xd0],>__r0
 05C1 5300              mov [__r0],A
 05C3 5A00              mov [__r1],X
 05C5 20                pop X
 05C6 5100              mov A,[__r1]
 05C8 5401              mov [X+1],A
 05CA 5100              mov A,[__r0]
 05CC 5400              mov [X+0],A
 05CE 3C0000            cmp [__r0],0
 05D1 B006              jnz X32
 05D3 3C0000            cmp [__r1],0
 05D6 A4BB              jz L103
 05D8           X32:
 05D8                   .dbline 401
 05D8           ;                                               {
 05D8                   .dbline 402
 05D8           ;                                                       total = atoi(param);
 05D8 5200              mov A,[X+0]
 05DA 08                push A
 05DB 5201              mov A,[X+1]
 05DD 08                push A
 05DE 7C0000            xcall _atoi
 05E1 38FE              add SP,-2
 05E3 62D000            mov REG[0xd0],>__r0
 05E6 5100              mov A,[__r1]
 05E8 5406              mov [X+6],A
 05EA 5100              mov A,[__r0]
 05EC 5405              mov [X+5],A
 05EE                   .dbline 403
 05EE           ;                                                       angle[0] = total%256;
 05EE 5001              mov A,1
 05F0 08                push A
 05F1 5000              mov A,0
 05F3 08                push A
 05F4 5205              mov A,[X+5]
 05F6 08                push A
 05F7 5206              mov A,[X+6]
 05F9 08                push A
 05FA 7C0000            xcall __divmod_16X16_16
 05FD 38FE              add SP,-2
 05FF 18                pop A
 0600 5300              mov [__r1],A
 0602 18                pop A
 0603 5100              mov A,[__r1]
 0605 5408              mov [X+8],A
 0607                   .dbline 404
 0607           ;                                                       angle[1] = total/256;
 0607 5001              mov A,1
 0609 08                push A
 060A 5000              mov A,0
 060C 08                push A
 060D 5205              mov A,[X+5]
 060F 08                push A
 0610 5206              mov A,[X+6]
 0612 08                push A
 0613 7C0000            xcall __divmod_16X16_16
 0616 18                pop A
 0617 5300              mov [__r1],A
 0619 18                pop A
 061A 38FE              add SP,-2
 061C 5100              mov A,[__r1]
 061E 5409              mov [X+9],A
 0620                   .dbline 405
 0620           ;                                                       longServoInstruction(ID,5,WRITE_SERVO,30,angle[0],angle[1]);
 0620 5209              mov A,[X+9]
 0622 08                push A
 0623 5208              mov A,[X+8]
 0625 08                push A
 0626 501E              mov A,30
 0628 08                push A
 0629 5003              mov A,3
 062B 08                push A
 062C 5005              mov A,5
 062E 08                push A
 062F 5204              mov A,[X+4]
 0631 08                push A
 0632 952C              xcall _longServoInstruction
 0634 38FA              add SP,-6
 0636                   .dbline 406
 0636           ;                                               }
 0636                   .dbline 407
 0636           ;                                       }
 0636 845B              xjmp L103
 0638           L109:
 0638                   .dbline 408
 0638           ;                                       else if((param[0] == 'p') || (param[0] == 'P'))
 0638 62D000            mov REG[0xd0],>__r0
 063B 5201              mov A,[X+1]
 063D 5300              mov [__r1],A
 063F 5200              mov A,[X+0]
 0641 60D4              mov REG[0xd4],A
 0643 3E00              mvi A,[__r1]
 0645 5300              mov [__r1],A
 0647 550000            mov [__r0],0
 064A 3C0000            cmp [__r0],0
 064D B005              jnz X33
 064F 3970              cmp A,112
 0651 A00E              jz L118
 0653           X33:
 0653 62D000            mov REG[0xd0],>__r0
 0656 3C0000            cmp [__r0],0
 0659 B045              jnz L116
 065B 3C0050            cmp [__r1],80
 065E B040              jnz L116
 0660           X34:
 0660           L118:
 0660                   .dbline 409
 0660           ;                                       {
 0660                   .dbline 410
 0660           ;                                               if(param = COMP_SERIAL_szGetParam())
 0660 10                push X
 0661 7C0000            xcall _COMP_SERIAL_szGetParam
 0664 62D000            mov REG[0xd0],>__r0
 0667 5300              mov [__r0],A
 0669 5A00              mov [__r1],X
 066B 20                pop X
 066C 5100              mov A,[__r1]
 066E 5401              mov [X+1],A
 0670 5100              mov A,[__r0]
 0672 5400              mov [X+0],A
 0674 3C0000            cmp [__r0],0
 0677 B006              jnz X35
 0679 3C0000            cmp [__r1],0
 067C A415              jz L103
 067E           X35:
 067E                   .dbline 411
 067E           ;                                               {
 067E                   .dbline 412
 067E           ;                                                       servoInstruction(ID,4,WRITE_SERVO,24,atoi(param));
 067E 5200              mov A,[X+0]
 0680 08                push A
 0681 5201              mov A,[X+1]
 0683 08                push A
 0684 7C0000            xcall _atoi
 0687 62D000            mov REG[0xd0],>__r0
 068A 5100              mov A,[__r1]
 068C 08                push A
 068D 5018              mov A,24
 068F 08                push A
 0690 5003              mov A,3
 0692 08                push A
 0693 5004              mov A,4
 0695 08                push A
 0696 5204              mov A,[X+4]
 0698 08                push A
 0699 9422              xcall _servoInstruction
 069B 38F9              add SP,-7
 069D                   .dbline 413
 069D           ;                                               }
 069D                   .dbline 414
 069D           ;                                       }
 069D 83F4              xjmp L103
 069F           L116:
 069F                   .dbline 415
 069F           ;                                       else if((param[0] == 's') || (param[0] == 'S'))
 069F 62D000            mov REG[0xd0],>__r0
 06A2 5201              mov A,[X+1]
 06A4 5300              mov [__r1],A
 06A6 5200              mov A,[X+0]
 06A8 60D4              mov REG[0xd4],A
 06AA 3E00              mvi A,[__r1]
 06AC 5300              mov [__r1],A
 06AE 550000            mov [__r0],0
 06B1 3C0000            cmp [__r0],0
 06B4 B005              jnz X36
 06B6 3973              cmp A,115
 06B8 A00E              jz L123
 06BA           X36:
 06BA 62D000            mov REG[0xd0],>__r0
 06BD 3C0000            cmp [__r0],0
 06C0 B3D1              jnz L103
 06C2 3C0053            cmp [__r1],83
 06C5 B3CC              jnz L103
 06C7           X37:
 06C7           L123:
 06C7                   .dbline 416
 06C7           ;                                       {
 06C7                   .dbline 417
 06C7           ;                                               if(param = COMP_SERIAL_szGetParam())
 06C7 10                push X
 06C8 7C0000            xcall _COMP_SERIAL_szGetParam
 06CB 62D000            mov REG[0xd0],>__r0
 06CE 5300              mov [__r0],A
 06D0 5A00              mov [__r1],X
 06D2 20                pop X
 06D3 5100              mov A,[__r1]
 06D5 5401              mov [X+1],A
 06D7 5100              mov A,[__r0]
 06D9 5400              mov [X+0],A
 06DB 3C0000            cmp [__r0],0
 06DE B006              jnz X38
 06E0 3C0000            cmp [__r1],0
 06E3 A3AE              jz L103
 06E5           X38:
 06E5                   .dbline 418
 06E5           ;                                               {
 06E5                   .dbline 419
 06E5           ;                                                       total = atoi(param);
 06E5 5200              mov A,[X+0]
 06E7 08                push A
 06E8 5201              mov A,[X+1]
 06EA 08                push A
 06EB 7C0000            xcall _atoi
 06EE 38FE              add SP,-2
 06F0 62D000            mov REG[0xd0],>__r0
 06F3 5100              mov A,[__r1]
 06F5 5406              mov [X+6],A
 06F7 5100              mov A,[__r0]
 06F9 5405              mov [X+5],A
 06FB                   .dbline 422
 06FB           ;                                                       
 06FB           ;                                                       // If no total, do nothing because 0 is no speed control (undesired).
 06FB           ;                                                       if(total)
 06FB 3D0500            cmp [X+5],0
 06FE B006              jnz X39
 0700 3D0600            cmp [X+6],0
 0703 A38E              jz L103
 0705           X39:
 0705                   .dbline 423
 0705           ;                                                       {
 0705                   .dbline 424
 0705           ;                                                               speed[0] = total%256;
 0705 62D000            mov REG[0xd0],>__r0
 0708 5001              mov A,1
 070A 08                push A
 070B 5000              mov A,0
 070D 08                push A
 070E 5205              mov A,[X+5]
 0710 08                push A
 0711 5206              mov A,[X+6]
 0713 08                push A
 0714 7C0000            xcall __divmod_16X16_16
 0717 38FE              add SP,-2
 0719 18                pop A
 071A 5300              mov [__r1],A
 071C 18                pop A
 071D 5100              mov A,[__r1]
 071F 540A              mov [X+10],A
 0721                   .dbline 425
 0721           ;                                                               speed[1] = total/256;
 0721 5001              mov A,1
 0723 08                push A
 0724 5000              mov A,0
 0726 08                push A
 0727 5205              mov A,[X+5]
 0729 08                push A
 072A 5206              mov A,[X+6]
 072C 08                push A
 072D 7C0000            xcall __divmod_16X16_16
 0730 18                pop A
 0731 5300              mov [__r1],A
 0733 18                pop A
 0734 38FE              add SP,-2
 0736 5100              mov A,[__r1]
 0738 540B              mov [X+11],A
 073A                   .dbline 426
 073A           ;                                                               longServoInstruction(ID,5,WRITE_SERVO,32,speed[0],speed[1]);
 073A 520B              mov A,[X+11]
 073C 08                push A
 073D 520A              mov A,[X+10]
 073F 08                push A
 0740 5020              mov A,32
 0742 08                push A
 0743 5003              mov A,3
 0745 08                push A
 0746 5005              mov A,5
 0748 08                push A
 0749 5204              mov A,[X+4]
 074B 08                push A
 074C 9412              xcall _longServoInstruction
 074E 38FA              add SP,-6
 0750                   .dbline 427
 0750           ;                                                       }
 0750                   .dbline 428
 0750           ;                                               }
 0750                   .dbline 429
 0750           ;                                       }
 0750                   .dbline 430
 0750           ;                               }
 0750                   .dbline 431
 0750           ;                       }
 0750                   .dbline 432
 0750           ;               }
 0750 8341              xjmp L103
 0752           L102:
 0752                   .dbline 433
 0752           ;               else if((param[0] == 'r') || (param[0] == 'R'))
 0752 62D000            mov REG[0xd0],>__r0
 0755 5201              mov A,[X+1]
 0757 5300              mov [__r1],A
 0759 5200              mov A,[X+0]
 075B 60D4              mov REG[0xd4],A
 075D 3E00              mvi A,[__r1]
 075F 5300              mov [__r1],A
 0761 550000            mov [__r0],0
 0764 3C0000            cmp [__r0],0
 0767 B005              jnz X40
 0769 3972              cmp A,114
 076B A00E              jz L132
 076D           X40:
 076D 62D000            mov REG[0xd0],>__r0
 0770 3C0000            cmp [__r0],0
 0773 B31E              jnz L130
 0775 3C0052            cmp [__r1],82
 0778 B319              jnz L130
 077A           X41:
 077A           L132:
 077A                   .dbline 434
 077A           ;               {                       
 077A                   .dbline 435
 077A           ;                       if(param = COMP_SERIAL_szGetParam())
 077A 10                push X
 077B 7C0000            xcall _COMP_SERIAL_szGetParam
 077E 62D000            mov REG[0xd0],>__r0
 0781 5300              mov [__r0],A
 0783 5A00              mov [__r1],X
 0785 20                pop X
 0786 5100              mov A,[__r1]
 0788 5401              mov [X+1],A
 078A 5100              mov A,[__r0]
 078C 5400              mov [X+0],A
 078E 3C0000            cmp [__r0],0
 0791 B006              jnz X42
 0793 3C0000            cmp [__r1],0
 0796 A2FB              jz L133
 0798           X42:
 0798                   .dbline 436
 0798           ;                       {
 0798                   .dbline 437
 0798           ;                               ID = atoi(param);
 0798 5200              mov A,[X+0]
 079A 08                push A
 079B 5201              mov A,[X+1]
 079D 08                push A
 079E 7C0000            xcall _atoi
 07A1 38FE              add SP,-2
 07A3 62D000            mov REG[0xd0],>__r0
 07A6 5100              mov A,[__r1]
 07A8 5404              mov [X+4],A
 07AA                   .dbline 438
 07AA           ;                               if(param = COMP_SERIAL_szGetParam())
 07AA 10                push X
 07AB 7C0000            xcall _COMP_SERIAL_szGetParam
 07AE 62D000            mov REG[0xd0],>__r0
 07B1 5300              mov [__r0],A
 07B3 5A00              mov [__r1],X
 07B5 20                pop X
 07B6 5100              mov A,[__r1]
 07B8 5401              mov [X+1],A
 07BA 5100              mov A,[__r0]
 07BC 5400              mov [X+0],A
 07BE 3C0000            cmp [__r0],0
 07C1 B006              jnz X43
 07C3 3C0000            cmp [__r1],0
 07C6 A2CB              jz L135
 07C8           X43:
 07C8                   .dbline 439
 07C8           ;                               {
 07C8                   .dbline 440
 07C8           ;                                       if((param[0] == 'a') || (param[0] == 'A'))
 07C8 62D000            mov REG[0xd0],>__r0
 07CB 5201              mov A,[X+1]
 07CD 5300              mov [__r1],A
 07CF 5200              mov A,[X+0]
 07D1 60D4              mov REG[0xd4],A
 07D3 3E00              mvi A,[__r1]
 07D5 5300              mov [__r1],A
 07D7 550000            mov [__r0],0
 07DA 3C0000            cmp [__r0],0
 07DD B005              jnz X44
 07DF 3961              cmp A,97
 07E1 A00E              jz L139
 07E3           X44:
 07E3 62D000            mov REG[0xd0],>__r0
 07E6 3C0000            cmp [__r0],0
 07E9 B0D1              jnz L137
 07EB 3C0041            cmp [__r1],65
 07EE B0CC              jnz L137
 07F0           X45:
 07F0           L139:
 07F0                   .dbline 441
 07F0           ;                                       {
 07F0                   .dbline 442
 07F0           ;                                               angle[0] = 0;
 07F0 560800            mov [X+8],0
 07F3                   .dbline 443
 07F3           ;                                               angle[1] = 0;
 07F3 560900            mov [X+9],0
 07F6                   .dbline 445
 07F6           ;                                               
 07F6           ;                                               servoInstruction(ID,4,READ_SERVO,36,2);
 07F6 5002              mov A,2
 07F8 08                push A
 07F9 5024              mov A,36
 07FB 08                push A
 07FC 5002              mov A,2
 07FE 08                push A
 07FF 5004              mov A,4
 0801 08                push A
 0802 5204              mov A,[X+4]
 0804 08                push A
 0805 92B6              xcall _servoInstruction
 0807                   .dbline 446
 0807           ;                                               configToggle(RX_MODE);
 0807 5000              mov A,0
 0809 08                push A
 080A 5001              mov A,1
 080C 08                push A
 080D 9402              xcall _configToggle
 080F 38F9              add SP,-7
 0811 8098              xjmp L142
 0813           L141:
 0813                   .dbline 450
 0813           ;                                                       
 0813           ;                                               // Loop until we read a response or time out.
 0813           ;                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0813           ;                                               {
 0813                   .dbline 451
 0813           ;                                                       if(RECEIVE_cReadChar() == ID)
 0813 10                push X
 0814 7C0000            xcall _RECEIVE_cReadChar
 0817 62D000            mov REG[0xd0],>__r0
 081A 20                pop X
 081B 3B04              cmp A,[X+4]
 081D B08C              jnz L144
 081F                   .dbline 452
 081F           ;                                                       {
 081F 807B              xjmp L147
 0821           L146:
 0821                   .dbline 454
 0821           ;                                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0821           ;                                                               {
 0821                   .dbline 455
 0821           ;                                                                       if(RECEIVE_cReadChar() == 4)
 0821 10                push X
 0822 7C0000            xcall _RECEIVE_cReadChar
 0825 62D000            mov REG[0xd0],>__r0
 0828 20                pop X
 0829 3904              cmp A,4
 082B B06F              jnz L149
 082D                   .dbline 456
 082D           ;                                                                       {
 082D                   .dbline 457
 082D           ;                                                                               if(RECEIVE_cGetChar() == 0)
 082D 10                push X
 082E 7C0000            xcall _RECEIVE_cGetChar
 0831 62D000            mov REG[0xd0],>__r0
 0834 20                pop X
 0835 3900              cmp A,0
 0837 B05A              jnz L151
 0839                   .dbline 458
 0839           ;                                                                               {
 0839                   .dbline 459
 0839           ;                                                                                       angle[0] = RECEIVE_cGetChar();
 0839 10                push X
 083A 7C0000            xcall _RECEIVE_cGetChar
 083D 62D000            mov REG[0xd0],>__r0
 0840 20                pop X
 0841 5408              mov [X+8],A
 0843                   .dbline 460
 0843           ;                                                                                       angle[1] = RECEIVE_cGetChar();
 0843 10                push X
 0844 7C0000            xcall _RECEIVE_cGetChar
 0847 62D000            mov REG[0xd0],>__r0
 084A 20                pop X
 084B 5409              mov [X+9],A
 084D                   .dbline 462
 084D           ;                                                                                       
 084D           ;                                                                                       configToggle(PC_MODE);
 084D 5000              mov A,0
 084F 08                push A
 0850 5002              mov A,2
 0852 08                push A
 0853 93BC              xcall _configToggle
 0855                   .dbline 464
 0855           ;                                                                                       
 0855           ;                                                                                       total = ((angle[1])*256) + angle[0];
 0855 5208              mov A,[X+8]
 0857 5406              mov [X+6],A
 0859 5209              mov A,[X+9]
 085B 5405              mov [X+5],A
 085D                   .dbline 465
 085D           ;                                                                                       itoa(param,total,10);
 085D 5000              mov A,0
 085F 08                push A
 0860 500A              mov A,10
 0862 08                push A
 0863 5205              mov A,[X+5]
 0865 08                push A
 0866 5206              mov A,[X+6]
 0868 08                push A
 0869 5200              mov A,[X+0]
 086B 08                push A
 086C 5201              mov A,[X+1]
 086E 08                push A
 086F 7C0000            xcall _itoa
 0872 38F8              add SP,-8
 0874                   .dbline 466
 0874           ;                                                                                       COMP_SERIAL_PutString(param);
 0874 10                push X
 0875 5200              mov A,[X+0]
 0877 08                push A
 0878 5201              mov A,[X+1]
 087A 5C                mov X,A
 087B 18                pop A
 087C 7C0000            xcall _COMP_SERIAL_PutString
 087F 20                pop X
 0880                   .dbline 467
 0880           ;                                                                                       COMP_SERIAL_PutChar('\n');
 0880 10                push X
 0881 500A              mov A,10
 0883 7C0000            xcall _COMP_SERIAL_PutChar
 0886 20                pop X
 0887                   .dbline 469
 0887           ; 
 0887           ;                                                                                       TIMEOUT = RX_TIMEOUT_DURATION;
 0887 62D000            mov REG[0xd0],>_TIMEOUT
 088A 550105            mov [_TIMEOUT+1],5
 088D 550000            mov [_TIMEOUT],0
 0890                   .dbline 470
 0890           ;                                                                               }
 0890 800A              xjmp L152
 0892           L151:
 0892                   .dbline 472
 0892           ;                                                                               else
 0892           ;                                                                               {
 0892                   .dbline 473
 0892           ;                                                                                       TIMEOUT = RX_TIMEOUT_DURATION;
 0892 62D000            mov REG[0xd0],>_TIMEOUT
 0895 550105            mov [_TIMEOUT+1],5
 0898 550000            mov [_TIMEOUT],0
 089B                   .dbline 474
 089B           ;                                                                               }
 089B           L152:
 089B                   .dbline 475
 089B           ;                                                                       }
 089B           L149:
 089B                   .dbline 476
 089B           ;                                                               }
 089B           L147:
 089B                   .dbline 453
 089B 62D000            mov REG[0xd0],>_TIMEOUT
 089E 5101              mov A,[_TIMEOUT+1]
 08A0 1105              sub A,5
 08A2 5100              mov A,[_TIMEOUT]
 08A4 3180              xor A,-128
 08A6 1980              sbb A,(0 ^ 0x80)
 08A8 CF78              jc L146
 08AA           X46:
 08AA                   .dbline 477
 08AA           ;                                                       }
 08AA           L144:
 08AA                   .dbline 478
 08AA           ;                                               }
 08AA           L142:
 08AA                   .dbline 449
 08AA 62D000            mov REG[0xd0],>_TIMEOUT
 08AD 5101              mov A,[_TIMEOUT+1]
 08AF 1105              sub A,5
 08B1 5100              mov A,[_TIMEOUT]
 08B3 3180              xor A,-128
 08B5 1980              sbb A,(0 ^ 0x80)
 08B7 CF5B              jc L141
 08B9           X47:
 08B9                   .dbline 479
 08B9           ;                                       }
 08B9 81D8              xjmp L138
 08BB           L137:
 08BB                   .dbline 480
 08BB           ;                                       else if ((param[0] == 'p') || (param[0] == 'P'))
 08BB 62D000            mov REG[0xd0],>__r0
 08BE 5201              mov A,[X+1]
 08C0 5300              mov [__r1],A
 08C2 5200              mov A,[X+0]
 08C4 60D4              mov REG[0xd4],A
 08C6 3E00              mvi A,[__r1]
 08C8 5300              mov [__r1],A
 08CA 550000            mov [__r0],0
 08CD 3C0000            cmp [__r0],0
 08D0 B005              jnz X48
 08D2 3970              cmp A,112
 08D4 A00E              jz L157
 08D6           X48:
 08D6 62D000            mov REG[0xd0],>__r0
 08D9 3C0000            cmp [__r0],0
 08DC B0EF              jnz L155
 08DE 3C0050            cmp [__r1],80
 08E1 B0EA              jnz L155
 08E3           X49:
 08E3           L157:
 08E3                   .dbline 481
 08E3           ;                                       {
 08E3                   .dbline 482
 08E3           ;                                               servoInstruction(ID,4,READ_SERVO,24,1);
 08E3 5001              mov A,1
 08E5 08                push A
 08E6 5018              mov A,24
 08E8 08                push A
 08E9 5002              mov A,2
 08EB 08                push A
 08EC 5004              mov A,4
 08EE 08                push A
 08EF 5204              mov A,[X+4]
 08F1 08                push A
 08F2 91C9              xcall _servoInstruction
 08F4                   .dbline 483
 08F4           ;                                               configToggle(RX_MODE);
 08F4 5000              mov A,0
 08F6 08                push A
 08F7 5001              mov A,1
 08F9 08                push A
 08FA 9315              xcall _configToggle
 08FC 38F9              add SP,-7
 08FE 80BC              xjmp L159
 0900           L158:
 0900                   .dbline 487
 0900           ;                                               
 0900           ;                                               // Loop until we read a response or time out.
 0900           ;                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0900           ;                                               {
 0900                   .dbline 488
 0900           ;                                                       if(RECEIVE_cReadChar() == ID)
 0900 10                push X
 0901 7C0000            xcall _RECEIVE_cReadChar
 0904 62D000            mov REG[0xd0],>__r0
 0907 20                pop X
 0908 3B04              cmp A,[X+4]
 090A B0B0              jnz L161
 090C                   .dbline 489
 090C           ;                                                       {
 090C                   .dbline 490
 090C           ;                                                               runningTotal = ID;
 090C 5204              mov A,[X+4]
 090E 5403              mov [X+3],A
 0910 560200            mov [X+2],0
 0913 8098              xjmp L164
 0915           L163:
 0915                   .dbline 493
 0915           ;                                                               // Loop until we read a response or time out.
 0915           ;                                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0915           ;                                                               {
 0915                   .dbline 495
 0915           ;                                                                       // Check the length of the packet.
 0915           ;                                                                       if(RECEIVE_cReadChar() == 3)
 0915 10                push X
 0916 7C0000            xcall _RECEIVE_cReadChar
 0919 62D000            mov REG[0xd0],>__r0
 091C 20                pop X
 091D 3903              cmp A,3
 091F B08C              jnz L166
 0921                   .dbline 496
 0921           ;                                                                       {
 0921                   .dbline 497
 0921           ;                                                                               runningTotal += 3;
 0921 070303            add [X+3],3
 0924 0F0200            adc [X+2],0
 0927 8075              xjmp L169
 0929           L168:
 0929                   .dbline 500
 0929           ;                                                                               // Loop until we read a response or time out.
 0929           ;                                                                               while(TIMEOUT < RX_TIMEOUT_DURATION)
 0929           ;                                                                               {
 0929                   .dbline 502
 0929           ;                                                                                       // Check for the checksum or 1.
 0929           ;                                                                                       if(tempByte = RECEIVE_cReadChar())
 0929 10                push X
 092A 7C0000            xcall _RECEIVE_cReadChar
 092D 62D000            mov REG[0xd0],>__r0
 0930 20                pop X
 0931 5407              mov [X+7],A
 0933 3900              cmp A,0
 0935 A067              jz L171
 0937                   .dbline 503
 0937           ;                                                                                       {
 0937                   .dbline 504
 0937           ;                                                                                               configToggle(PC_MODE);
 0937 5000              mov A,0
 0939 08                push A
 093A 5002              mov A,2
 093C 08                push A
 093D 92D2              xcall _configToggle
 093F 38FE              add SP,-2
 0941                   .dbline 506
 0941           ;                                                                                               
 0941           ;                                                                                               if((runningTotal%256) == (255-tempByte))
 0941 62D000            mov REG[0xd0],>__r0
 0944 5207              mov A,[X+7]
 0946 5300              mov [__r1],A
 0948 550000            mov [__r0],0
 094B 50FF              mov A,-1
 094D 1200              sub A,[__r1]
 094F 5300              mov [__r1],A
 0951 5000              mov A,0
 0953 1A00              sbb A,[__r0]
 0955 5300              mov [__r0],A
 0957 5001              mov A,1
 0959 08                push A
 095A 5000              mov A,0
 095C 08                push A
 095D 5202              mov A,[X+2]
 095F 08                push A
 0960 5203              mov A,[X+3]
 0962 08                push A
 0963 7C0000            xcall __divmod_16X16_16
 0966 38FE              add SP,-2
 0968 18                pop A
 0969 5300              mov [__r3],A
 096B 18                pop A
 096C 3A00              cmp A,[__r0]
 096E B017              jnz L173
 0970 5100              mov A,[__r3]
 0972 3A00              cmp A,[__r1]
 0974 B011              jnz L173
 0976           X50:
 0976                   .dbline 507
 0976           ;                                                                                               {
 0976                   .dbline 509
 0976           ;                                                                                                       // Send a 0 if we hit the checksum.
 0976           ;                                                                                                       COMP_SERIAL_PutChar('0');
 0976 10                push X
 0977 5030              mov A,48
 0979 7C0000            xcall _COMP_SERIAL_PutChar
 097C 20                pop X
 097D                   .dbline 510
 097D           ;                                                                                                       COMP_SERIAL_PutChar('\n');
 097D 10                push X
 097E 500A              mov A,10
 0980 7C0000            xcall _COMP_SERIAL_PutChar
 0983 20                pop X
 0984                   .dbline 511
 0984           ;                                                                                               }
 0984 800F              xjmp L174
 0986           L173:
 0986                   .dbline 513
 0986           ;                                                                                               else
 0986           ;                                                                                               {
 0986                   .dbline 515
 0986           ;                                                                                                       // Send a 1.
 0986           ;                                                                                                       COMP_SERIAL_PutChar('1');
 0986 10                push X
 0987 5031              mov A,49
 0989 7C0000            xcall _COMP_SERIAL_PutChar
 098C 20                pop X
 098D                   .dbline 516
 098D           ;                                                                                                       COMP_SERIAL_PutChar('\n');
 098D 10                push X
 098E 500A              mov A,10
 0990 7C0000            xcall _COMP_SERIAL_PutChar
 0993 20                pop X
 0994                   .dbline 517
 0994           ;                                                                                               }
 0994           L174:
 0994                   .dbline 519
 0994           ;               
 0994           ;                                                                                               TIMEOUT = RX_TIMEOUT_DURATION;
 0994 62D000            mov REG[0xd0],>_TIMEOUT
 0997 550105            mov [_TIMEOUT+1],5
 099A 550000            mov [_TIMEOUT],0
 099D                   .dbline 520
 099D           ;                                                                                       }
 099D           L171:
 099D                   .dbline 521
 099D           ;                                                                               }
 099D           L169:
 099D                   .dbline 499
 099D 62D000            mov REG[0xd0],>_TIMEOUT
 09A0 5101              mov A,[_TIMEOUT+1]
 09A2 1105              sub A,5
 09A4 5100              mov A,[_TIMEOUT]
 09A6 3180              xor A,-128
 09A8 1980              sbb A,(0 ^ 0x80)
 09AA CF7E              jc L168
 09AC           X51:
 09AC                   .dbline 522
 09AC           ;                                                                       }
 09AC           L166:
 09AC                   .dbline 523
 09AC           ;                                                               }
 09AC           L164:
 09AC                   .dbline 492
 09AC 62D000            mov REG[0xd0],>_TIMEOUT
 09AF 5101              mov A,[_TIMEOUT+1]
 09B1 1105              sub A,5
 09B3 5100              mov A,[_TIMEOUT]
 09B5 3180              xor A,-128
 09B7 1980              sbb A,(0 ^ 0x80)
 09B9 CF5B              jc L163
 09BB           X52:
 09BB                   .dbline 524
 09BB           ;                                                       }
 09BB           L161:
 09BB                   .dbline 525
 09BB           ;                                               }
 09BB           L159:
 09BB                   .dbline 486
 09BB 62D000            mov REG[0xd0],>_TIMEOUT
 09BE 5101              mov A,[_TIMEOUT+1]
 09C0 1105              sub A,5
 09C2 5100              mov A,[_TIMEOUT]
 09C4 3180              xor A,-128
 09C6 1980              sbb A,(0 ^ 0x80)
 09C8 CF37              jc L158
 09CA           X53:
 09CA                   .dbline 526
 09CA           ;                                       }
 09CA 80C7              xjmp L156
 09CC           L155:
 09CC                   .dbline 527
 09CC           ;                                       else if ((param[0] == 't') || (param[0] == 'T'))
 09CC 62D000            mov REG[0xd0],>__r0
 09CF 5201              mov A,[X+1]
 09D1 5300              mov [__r1],A
 09D3 5200              mov A,[X+0]
 09D5 60D4              mov REG[0xd4],A
 09D7 3E00              mvi A,[__r1]
 09D9 5300              mov [__r1],A
 09DB 550000            mov [__r0],0
 09DE 3C0000            cmp [__r0],0
 09E1 B005              jnz X54
 09E3 3974              cmp A,116
 09E5 A00E              jz L177
 09E7           X54:
 09E7 62D000            mov REG[0xd0],>__r0
 09EA 3C0000            cmp [__r0],0
 09ED B042              jnz L175
 09EF 3C0054            cmp [__r1],84
 09F2 B03D              jnz L175
 09F4           X55:
 09F4           L177:
 09F4                   .dbline 528
 09F4           ;                                       {
 09F4                   .dbline 529
 09F4           ;                                               if(pingModule(ID))
 09F4 62D000            mov REG[0xd0],>__r0
 09F7 5204              mov A,[X+4]
 09F9 5300              mov [__r1],A
 09FB 5000              mov A,0
 09FD 08                push A
 09FE 5100              mov A,[__r1]
 0A00 08                push A
 0A01 7C0037            xcall _pingModule
 0A04 38FE              add SP,-2
 0A06 62D000            mov REG[0xd0],>__r0
 0A09 3C0000            cmp [__r0],0
 0A0C B006              jnz X56
 0A0E 3C0000            cmp [__r1],0
 0A11 A080              jz L176
 0A13           X56:
 0A13                   .dbline 530
 0A13           ;                                               {
 0A13                   .dbline 531
 0A13           ;                                                       configToggle(PC_MODE);
 0A13 5000              mov A,0
 0A15 08                push A
 0A16 5002              mov A,2
 0A18 08                push A
 0A19 91F6              xcall _configToggle
 0A1B 38FE              add SP,-2
 0A1D                   .dbline 533
 0A1D           ;                                                                                               
 0A1D           ;                                                       COMP_SERIAL_PutChar(PARAM[0]);
 0A1D 10                push X
 0A1E 62D000            mov REG[0xd0],>_PARAM
 0A21 5100              mov A,[_PARAM]
 0A23 7C0000            xcall _COMP_SERIAL_PutChar
 0A26 20                pop X
 0A27                   .dbline 534
 0A27           ;                                                       COMP_SERIAL_PutChar('\n');
 0A27 10                push X
 0A28 500A              mov A,10
 0A2A 7C0000            xcall _COMP_SERIAL_PutChar
 0A2D 20                pop X
 0A2E                   .dbline 535
 0A2E           ;                                               }
 0A2E                   .dbline 536
 0A2E           ;                                       }
 0A2E 8063              xjmp L176
 0A30           L175:
 0A30                   .dbline 537
 0A30           ;                                       else if ((param[0] == 'c') || (param[0] == 'C'))
 0A30 62D000            mov REG[0xd0],>__r0
 0A33 5201              mov A,[X+1]
 0A35 5300              mov [__r1],A
 0A37 5200              mov A,[X+0]
 0A39 60D4              mov REG[0xd4],A
 0A3B 3E00              mvi A,[__r1]
 0A3D 5300              mov [__r1],A
 0A3F 550000            mov [__r0],0
 0A42 3C0000            cmp [__r0],0
 0A45 B005              jnz X57
 0A47 3963              cmp A,99
 0A49 A00E              jz L182
 0A4B           X57:
 0A4B 62D000            mov REG[0xd0],>__r0
 0A4E 3C0000            cmp [__r0],0
 0A51 B040              jnz L180
 0A53 3C0043            cmp [__r1],67
 0A56 B03B              jnz L180
 0A58           X58:
 0A58           L182:
 0A58                   .dbline 538
 0A58           ;                                       {
 0A58                   .dbline 539
 0A58           ;                                               if(pingModule(ID))
 0A58 62D000            mov REG[0xd0],>__r0
 0A5B 5204              mov A,[X+4]
 0A5D 5300              mov [__r1],A
 0A5F 5000              mov A,0
 0A61 08                push A
 0A62 5100              mov A,[__r1]
 0A64 08                push A
 0A65 7C0037            xcall _pingModule
 0A68 38FE              add SP,-2
 0A6A 62D000            mov REG[0xd0],>__r0
 0A6D 3C0000            cmp [__r0],0
 0A70 B006              jnz X59
 0A72 3C0000            cmp [__r1],0
 0A75 A01C              jz L183
 0A77           X59:
 0A77                   .dbline 540
 0A77           ;                                               {       
 0A77                   .dbline 541
 0A77           ;                                                       configToggle(PC_MODE);
 0A77 5000              mov A,0
 0A79 08                push A
 0A7A 5002              mov A,2
 0A7C 08                push A
 0A7D 9192              xcall _configToggle
 0A7F 38FE              add SP,-2
 0A81                   .dbline 543
 0A81           ;                                                       
 0A81           ;                                                       COMP_SERIAL_PutChar(PARAM[1]);
 0A81 10                push X
 0A82 62D000            mov REG[0xd0],>_PARAM
 0A85 5101              mov A,[_PARAM+1]
 0A87 7C0000            xcall _COMP_SERIAL_PutChar
 0A8A 20                pop X
 0A8B                   .dbline 544
 0A8B           ;                                                       COMP_SERIAL_PutChar('\n');
 0A8B 10                push X
 0A8C 500A              mov A,10
 0A8E 7C0000            xcall _COMP_SERIAL_PutChar
 0A91 20                pop X
 0A92                   .dbline 545
 0A92           ;                                               }
 0A92           L183:
 0A92                   .dbline 546
 0A92           ;                                       }
 0A92           L180:
 0A92           L176:
 0A92           L156:
 0A92           L138:
 0A92                   .dbline 547
 0A92           ;                               }
 0A92           L135:
 0A92                   .dbline 548
 0A92           ;                       }
 0A92           L133:
 0A92                   .dbline 549
 0A92           ;               }
 0A92           L130:
 0A92           L103:
 0A92           L100:
 0A92           L97:
 0A92                   .dbline 550
 0A92           ;       }
 0A92           L94:
 0A92                   .dbline 552
 0A92           ;       
 0A92           ;       if(STATE != PC_MODE)
 0A92 62D000            mov REG[0xd0],>_STATE
 0A95 3C0000            cmp [_STATE],0
 0A98 B006              jnz X60
 0A9A 3C0102            cmp [_STATE+1],2
 0A9D A00D              jz L186
 0A9F           X60:
 0A9F                   .dbline 553
 0A9F           ;       {
 0A9F                   .dbline 554
 0A9F           ;               configToggle(PC_MODE);
 0A9F 5000              mov A,0
 0AA1 08                push A
 0AA2 5002              mov A,2
 0AA4 08                push A
 0AA5 916A              xcall _configToggle
 0AA7 38FE              add SP,-2
 0AA9                   .dbline 555
 0AA9           ;       }
 0AA9 800F              xjmp L187
 0AAB           L186:
 0AAB                   .dbline 557
 0AAB           ;       else
 0AAB           ;       {
 0AAB                   .dbline 558
 0AAB           ;               TIMEOUT = 0;
 0AAB 62D000            mov REG[0xd0],>_TIMEOUT
 0AAE 550100            mov [_TIMEOUT+1],0
 0AB1 550000            mov [_TIMEOUT],0
 0AB4                   .dbline 559
 0AB4           ;               COMP_SERIAL_CmdReset();
 0AB4 10                push X
 0AB5 7C0000            xcall _COMP_SERIAL_CmdReset
 0AB8 20                pop X
 0AB9                   .dbline 560
 0AB9           ;       }
 0AB9           L187:
 0AB9                   .dbline -2
 0AB9           L93:
 0AB9 38F4              add SP,-12
 0ABB 20                pop X
 0ABC                   .dbline 0 ; func end
 0ABC 7F                ret
 0ABD                   .dbsym l speed 10 A[2:2]c
 0ABD                   .dbsym l angle 8 A[2:2]c
 0ABD                   .dbsym l tempByte 7 c
 0ABD                   .dbsym l total 5 I
 0ABD                   .dbsym l ID 4 c
 0ABD                   .dbsym l runningTotal 2 I
 0ABD                   .dbsym l param 0 pc
 0ABD                   .dbend
 0ABD                   .dbfunc e servoInstruction _servoInstruction fV
 0ABD           ;          total -> X+1
 0ABD           ;       checksum -> X+0
 0ABD           ;          value -> X-8
 0ABD           ;        address -> X-7
 0ABD           ;    instruction -> X-6
 0ABD           ;         length -> X-5
 0ABD           ;             id -> X-4
 0ABD           _servoInstruction::
 0ABD                   .dbline -1
 0ABD 10                push X
 0ABE 4F                mov X,SP
 0ABF 3803              add SP,3
 0AC1                   .dbline 566
 0AC1           ; }
 0AC1           ; 
 0AC1           ; // This function receives a destination, command length, instruction type, address, and value.
 0AC1           ; // With these parameters, the function sends a packet to the communication bus.
 0AC1           ; void servoInstruction(char id, char length, char instruction, char address, char value)
 0AC1           ; {
 0AC1                   .dbline 570
 0AC1           ;       char checksum;
 0AC1           ;       int total;
 0AC1           ;       
 0AC1           ;       total = id + length + instruction + address + value;
 0AC1 62D000            mov REG[0xd0],>__r0
 0AC4 52FB              mov A,[X-5]
 0AC6 5300              mov [__r1],A
 0AC8 550000            mov [__r0],0
 0ACB 52FC              mov A,[X-4]
 0ACD 0200              add A,[__r1]
 0ACF 5300              mov [__r1],A
 0AD1 5000              mov A,0
 0AD3 0A00              adc A,[__r0]
 0AD5 5300              mov [__r0],A
 0AD7 52FA              mov A,[X-6]
 0AD9 0400              add [__r1],A
 0ADB 0E0000            adc [__r0],0
 0ADE 52F9              mov A,[X-7]
 0AE0 0400              add [__r1],A
 0AE2 0E0000            adc [__r0],0
 0AE5 52F8              mov A,[X-8]
 0AE7 5300              mov [__r3],A
 0AE9 550000            mov [__r2],0
 0AEC 5100              mov A,[__r1]
 0AEE 0200              add A,[__r3]
 0AF0 5402              mov [X+2],A
 0AF2 5100              mov A,[__r0]
 0AF4 0A00              adc A,[__r2]
 0AF6 5401              mov [X+1],A
 0AF8                   .dbline 573
 0AF8           ;       
 0AF8           ;       // Calculate the checksum value for our servo communication.
 0AF8           ;       checksum = 255-(total%256);
 0AF8 5001              mov A,1
 0AFA 08                push A
 0AFB 5000              mov A,0
 0AFD 08                push A
 0AFE 5201              mov A,[X+1]
 0B00 08                push A
 0B01 5202              mov A,[X+2]
 0B03 08                push A
 0B04 7C0000            xcall __divmod_16X16_16
 0B07 38FE              add SP,-2
 0B09 18                pop A
 0B0A 5300              mov [__r1],A
 0B0C 18                pop A
 0B0D 50FF              mov A,-1
 0B0F 1200              sub A,[__r1]
 0B11 5400              mov [X+0],A
 0B13                   .dbline 576
 0B13           ;       
 0B13           ;       // Talk to the servo.
 0B13           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte one
 0B13 10                push X
 0B14 50FF              mov A,-1
 0B16 7C0000            xcall _TX_REPEATER_PutChar
 0B19 20                pop X
 0B1A                   .dbline 577
 0B1A           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte two
 0B1A 10                push X
 0B1B 50FF              mov A,-1
 0B1D 7C0000            xcall _TX_REPEATER_PutChar
 0B20 20                pop X
 0B21                   .dbline 578
 0B21           ;       TX_REPEATER_PutChar(id);                        // Servo ID
 0B21 10                push X
 0B22 52FC              mov A,[X-4]
 0B24 7C0000            xcall _TX_REPEATER_PutChar
 0B27 20                pop X
 0B28                   .dbline 579
 0B28           ;       TX_REPEATER_PutChar(length);            // The instruction length.
 0B28 10                push X
 0B29 52FB              mov A,[X-5]
 0B2B 7C0000            xcall _TX_REPEATER_PutChar
 0B2E 20                pop X
 0B2F                   .dbline 580
 0B2F           ;       TX_REPEATER_PutChar(instruction);       // The instruction to carry out.
 0B2F 10                push X
 0B30 52FA              mov A,[X-6]
 0B32 7C0000            xcall _TX_REPEATER_PutChar
 0B35 20                pop X
 0B36                   .dbline 581
 0B36           ;       TX_REPEATER_PutChar(address);           // The address to read/write from/to.
 0B36 10                push X
 0B37 52F9              mov A,[X-7]
 0B39 7C0000            xcall _TX_REPEATER_PutChar
 0B3C 20                pop X
 0B3D                   .dbline 582
 0B3D           ;       TX_REPEATER_PutChar(value);                     // The value to write or number of bytes to read.
 0B3D 10                push X
 0B3E 52F8              mov A,[X-8]
 0B40 7C0000            xcall _TX_REPEATER_PutChar
 0B43 20                pop X
 0B44                   .dbline 583
 0B44           ;       TX_REPEATER_PutChar(checksum);          // This is the checksum.
 0B44 10                push X
 0B45 5200              mov A,[X+0]
 0B47 7C0000            xcall _TX_REPEATER_PutChar
 0B4A 20                pop X
 0B4B           L189:
 0B4B                   .dbline 586
 0B4B           ;       
 0B4B           ;       // Wait for the transmission to finish.
 0B4B           ;       while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
 0B4B           L190:
 0B4B                   .dbline 586
 0B4B 10                push X
 0B4C 7C0000            xcall _TX_REPEATER_bReadTxStatus
 0B4F 62D000            mov REG[0xd0],>__r0
 0B52 20                pop X
 0B53 5300              mov [__r0],A
 0B55 470020            tst [__r0],32
 0B58 AFF2              jz L189
 0B5A                   .dbline 589
 0B5A           ;       
 0B5A           ;       // Make completely sure we're done.
 0B5A           ;       xmitWait();
 0B5A 93A4              xcall _xmitWait
 0B5C                   .dbline -2
 0B5C           L188:
 0B5C 38FD              add SP,-3
 0B5E 20                pop X
 0B5F                   .dbline 0 ; func end
 0B5F 7F                ret
 0B60                   .dbsym l total 1 I
 0B60                   .dbsym l checksum 0 c
 0B60                   .dbsym l value -8 c
 0B60                   .dbsym l address -7 c
 0B60                   .dbsym l instruction -6 c
 0B60                   .dbsym l length -5 c
 0B60                   .dbsym l id -4 c
 0B60                   .dbend
 0B60                   .dbfunc e longServoInstruction _longServoInstruction fV
 0B60           ;          total -> X+1
 0B60           ;       checksum -> X+0
 0B60           ;         value2 -> X-9
 0B60           ;         value1 -> X-8
 0B60           ;        address -> X-7
 0B60           ;    instruction -> X-6
 0B60           ;         length -> X-5
 0B60           ;             id -> X-4
 0B60           _longServoInstruction::
 0B60                   .dbline -1
 0B60 10                push X
 0B61 4F                mov X,SP
 0B62 3803              add SP,3
 0B64                   .dbline 594
 0B64           ; }
 0B64           ; 
 0B64           ; // This function receives a destination, command length, instruction type, address, and two values.
 0B64           ; void longServoInstruction(char id, char length, char instruction, char address, char value1, char value2)
 0B64           ; {
 0B64                   .dbline 598
 0B64           ;       char checksum;
 0B64           ;       int total;
 0B64           ;       
 0B64           ;       total = id + length + instruction + address + value1 + value2;
 0B64 62D000            mov REG[0xd0],>__r0
 0B67 52FB              mov A,[X-5]
 0B69 5300              mov [__r1],A
 0B6B 550000            mov [__r0],0
 0B6E 52FC              mov A,[X-4]
 0B70 0200              add A,[__r1]
 0B72 5300              mov [__r1],A
 0B74 5000              mov A,0
 0B76 0A00              adc A,[__r0]
 0B78 5300              mov [__r0],A
 0B7A 52FA              mov A,[X-6]
 0B7C 0400              add [__r1],A
 0B7E 0E0000            adc [__r0],0
 0B81 52F9              mov A,[X-7]
 0B83 0400              add [__r1],A
 0B85 0E0000            adc [__r0],0
 0B88 52F8              mov A,[X-8]
 0B8A 0400              add [__r1],A
 0B8C 0E0000            adc [__r0],0
 0B8F 52F7              mov A,[X-9]
 0B91 5300              mov [__r3],A
 0B93 550000            mov [__r2],0
 0B96 5100              mov A,[__r1]
 0B98 0200              add A,[__r3]
 0B9A 5402              mov [X+2],A
 0B9C 5100              mov A,[__r0]
 0B9E 0A00              adc A,[__r2]
 0BA0 5401              mov [X+1],A
 0BA2                   .dbline 601
 0BA2           ;       
 0BA2           ;       // Calculate the checksum value for our servo communication.
 0BA2           ;       checksum = 255-(total%256);
 0BA2 5001              mov A,1
 0BA4 08                push A
 0BA5 5000              mov A,0
 0BA7 08                push A
 0BA8 5201              mov A,[X+1]
 0BAA 08                push A
 0BAB 5202              mov A,[X+2]
 0BAD 08                push A
 0BAE 7C0000            xcall __divmod_16X16_16
 0BB1 38FE              add SP,-2
 0BB3 18                pop A
 0BB4 5300              mov [__r1],A
 0BB6 18                pop A
 0BB7 50FF              mov A,-1
 0BB9 1200              sub A,[__r1]
 0BBB 5400              mov [X+0],A
 0BBD                   .dbline 604
 0BBD           ;       
 0BBD           ;       // Talk to the servo.
 0BBD           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte one
 0BBD 10                push X
 0BBE 50FF              mov A,-1
 0BC0 7C0000            xcall _TX_REPEATER_PutChar
 0BC3 20                pop X
 0BC4                   .dbline 605
 0BC4           ;       TX_REPEATER_PutChar(SERVO_START);       // Start byte two
 0BC4 10                push X
 0BC5 50FF              mov A,-1
 0BC7 7C0000            xcall _TX_REPEATER_PutChar
 0BCA 20                pop X
 0BCB                   .dbline 606
 0BCB           ;       TX_REPEATER_PutChar(id);                        // Servo ID
 0BCB 10                push X
 0BCC 52FC              mov A,[X-4]
 0BCE 7C0000            xcall _TX_REPEATER_PutChar
 0BD1 20                pop X
 0BD2                   .dbline 607
 0BD2           ;       TX_REPEATER_PutChar(length);            // The instruction length.
 0BD2 10                push X
 0BD3 52FB              mov A,[X-5]
 0BD5 7C0000            xcall _TX_REPEATER_PutChar
 0BD8 20                pop X
 0BD9                   .dbline 608
 0BD9           ;       TX_REPEATER_PutChar(instruction);       // The instruction to carry out.
 0BD9 10                push X
 0BDA 52FA              mov A,[X-6]
 0BDC 7C0000            xcall _TX_REPEATER_PutChar
 0BDF 20                pop X
 0BE0                   .dbline 609
 0BE0           ;       TX_REPEATER_PutChar(address);           // The address to read/write from/to.
 0BE0 10                push X
 0BE1 52F9              mov A,[X-7]
 0BE3 7C0000            xcall _TX_REPEATER_PutChar
 0BE6 20                pop X
 0BE7                   .dbline 610
 0BE7           ;       TX_REPEATER_PutChar(value1);            // The first value to write.
 0BE7 10                push X
 0BE8 52F8              mov A,[X-8]
 0BEA 7C0000            xcall _TX_REPEATER_PutChar
 0BED 20                pop X
 0BEE                   .dbline 611
 0BEE           ;       TX_REPEATER_PutChar(value2);            // The first value to write.
 0BEE 10                push X
 0BEF 52F7              mov A,[X-9]
 0BF1 7C0000            xcall _TX_REPEATER_PutChar
 0BF4 20                pop X
 0BF5                   .dbline 612
 0BF5           ;       TX_REPEATER_PutChar(checksum);          // This is the checksum.
 0BF5 10                push X
 0BF6 5200              mov A,[X+0]
 0BF8 7C0000            xcall _TX_REPEATER_PutChar
 0BFB 20                pop X
 0BFC           L193:
 0BFC                   .dbline 615
 0BFC           ;       
 0BFC           ;       // Wait for the transmission to finish.
 0BFC           ;       while(!(TX_REPEATER_bReadTxStatus() & TX_REPEATER_TX_COMPLETE));
 0BFC           L194:
 0BFC                   .dbline 615
 0BFC 10                push X
 0BFD 7C0000            xcall _TX_REPEATER_bReadTxStatus
 0C00 62D000            mov REG[0xd0],>__r0
 0C03 20                pop X
 0C04 5300              mov [__r0],A
 0C06 470020            tst [__r0],32
 0C09 AFF2              jz L193
 0C0B                   .dbline 618
 0C0B           ;       
 0C0B           ;       // Make completely sure we're done.
 0C0B           ;       xmitWait();
 0C0B 92F3              xcall _xmitWait
 0C0D                   .dbline -2
 0C0D           L192:
 0C0D 38FD              add SP,-3
 0C0F 20                pop X
 0C10                   .dbline 0 ; func end
 0C10 7F                ret
 0C11                   .dbsym l total 1 I
 0C11                   .dbsym l checksum 0 c
 0C11                   .dbsym l value2 -9 c
 0C11                   .dbsym l value1 -8 c
 0C11                   .dbsym l address -7 c
 0C11                   .dbsym l instruction -6 c
 0C11                   .dbsym l length -5 c
 0C11                   .dbsym l id -4 c
 0C11                   .dbend
 0C11                   .dbfunc e configToggle _configToggle fV
 0C11           ;           mode -> X-5
 0C11           _configToggle::
 0C11                   .dbline -1
 0C11 10                push X
 0C12 4F                mov X,SP
 0C13                   .dbline 624
 0C13           ; }
 0C13           ; 
 0C13           ; // This function allows the program to pass an RX or TX mode flag for switching between modes on the
 0C13           ; // half duplex UART serial communication line.
 0C13           ; void configToggle(int mode)
 0C13           ; {
 0C13                   .dbline 626
 0C13           ;       // Disconnect from the global bus and leave the pin high.
 0C13           ;       PRT0DR |= 0b11111111;
 0C13 4300FF            or REG[0],-1
 0C16                   .dbline 627
 0C16           ;       PRT0GS &= 0b00000000;
 0C16 620200            mov REG[0x2],0
 0C19                   .dbline 631
 0C19           ; 
 0C19           ;       // Unload the configuration of the current state.
 0C19           ;       // If there is no state, blindly wipe all configurations.
 0C19           ;       if(STATE)
 0C19 62D000            mov REG[0xd0],>_STATE
 0C1C 3C0000            cmp [_STATE],0
 0C1F B006              jnz X61
 0C21 3C0100            cmp [_STATE+1],0
 0C24 A010              jz L197
 0C26           X61:
 0C26                   .dbline 632
 0C26           ;       {
 0C26                   .dbline 633
 0C26           ;               unloadConfig(STATE);
 0C26 62D000            mov REG[0xd0],>_STATE
 0C29 5100              mov A,[_STATE]
 0C2B 08                push A
 0C2C 5101              mov A,[_STATE+1]
 0C2E 08                push A
 0C2F 90C9              xcall _unloadConfig
 0C31 38FE              add SP,-2
 0C33                   .dbline 634
 0C33           ;       }
 0C33 8003              xjmp L198
 0C35           L197:
 0C35                   .dbline 636
 0C35           ;       else
 0C35           ;       {
 0C35                   .dbline 637
 0C35           ;               unloadAllConfigs();
 0C35 90B9              xcall _unloadAllConfigs
 0C37                   .dbline 638
 0C37           ;       }
 0C37           L198:
 0C37                   .dbline 640
 0C37           ;       
 0C37           ;       if(mode == PC_MODE)
 0C37 3DFB00            cmp [X-5],0
 0C3A B037              jnz L199
 0C3C 3DFC02            cmp [X-4],2
 0C3F B032              jnz L199
 0C41           X62:
 0C41                   .dbline 641
 0C41           ;       {
 0C41                   .dbline 642
 0C41           ;               LoadConfig_pc_listener();
 0C41 7C0000            xcall _LoadConfig_pc_listener
 0C44                   .dbline 644
 0C44           ; 
 0C44           ;               COMP_SERIAL_CmdReset();                                                 // Initialize the buffer.
 0C44 10                push X
 0C45 7C0000            xcall _COMP_SERIAL_CmdReset
 0C48 20                pop X
 0C49                   .dbline 645
 0C49           ;               COMP_SERIAL_IntCntl(COMP_SERIAL_ENABLE_RX_INT); // Enable RX interrupts  
 0C49 10                push X
 0C4A 5001              mov A,1
 0C4C 7C0000            xcall _COMP_SERIAL_IntCntl
 0C4F 20                pop X
 0C50                   .dbline 646
 0C50           ;               COMP_SERIAL_Start(UART_PARITY_NONE);                    // Starts the UART.
 0C50 10                push X
 0C51 5000              mov A,0
 0C53 7C0000            xcall _COMP_SERIAL_Start
 0C56 20                pop X
 0C57                   .dbline 648
 0C57           ;               
 0C57           ;               TX_REPEATER_Start(TX_REPEATER_PARITY_NONE);             // Start the TX repeater.
 0C57 10                push X
 0C58 5000              mov A,0
 0C5A 7C0000            xcall _TX_REPEATER_Start
 0C5D 20                pop X
 0C5E                   .dbline 650
 0C5E           ;               
 0C5E           ;               TIMEOUT = 0;
 0C5E 62D000            mov REG[0xd0],>_TIMEOUT
 0C61 550100            mov [_TIMEOUT+1],0
 0C64 550000            mov [_TIMEOUT],0
 0C67                   .dbline 651
 0C67           ;               STATE = PC_MODE;
 0C67 62D000            mov REG[0xd0],>_STATE
 0C6A 550102            mov [_STATE+1],2
 0C6D 550000            mov [_STATE],0
 0C70                   .dbline 652
 0C70           ;       }
 0C70 807A              xjmp L200
 0C72           L199:
 0C72                   .dbline 653
 0C72           ;       else if(mode == RX_MODE)
 0C72 3DFB00            cmp [X-5],0
 0C75 B02C              jnz L201
 0C77 3DFC01            cmp [X-4],1
 0C7A B027              jnz L201
 0C7C           X63:
 0C7C                   .dbline 654
 0C7C           ;       {
 0C7C                   .dbline 655
 0C7C           ;               LoadConfig_receiver_config();
 0C7C 7C0000            xcall _LoadConfig_receiver_config
 0C7F                   .dbline 658
 0C7F           ;               
 0C7F           ;               // Start the receiver.
 0C7F           ;               RECEIVE_Start(RECEIVE_PARITY_NONE);
 0C7F 10                push X
 0C80 5000              mov A,0
 0C82 7C0000            xcall _RECEIVE_Start
 0C85 20                pop X
 0C86                   .dbline 661
 0C86           ;               
 0C86           ;               // Start response timeout timer and enable its interrupt routine.
 0C86           ;               TIMEOUT = 0;
 0C86 62D000            mov REG[0xd0],>_TIMEOUT
 0C89 550100            mov [_TIMEOUT+1],0
 0C8C 550000            mov [_TIMEOUT],0
 0C8F                   .dbline 662
 0C8F           ;               RX_TIMEOUT_EnableInt();
 0C8F 10                push X
 0C90 7C0000            xcall _RX_TIMEOUT_EnableInt
 0C93                   .dbline 663
 0C93           ;               RX_TIMEOUT_Start();
 0C93 7C0000            xcall _RX_TIMEOUT_Start
 0C96 20                pop X
 0C97                   .dbline 665
 0C97           ;               
 0C97           ;               STATE = RX_MODE;
 0C97 62D000            mov REG[0xd0],>_STATE
 0C9A 550101            mov [_STATE+1],1
 0C9D 550000            mov [_STATE],0
 0CA0                   .dbline 666
 0CA0           ;       }
 0CA0 804A              xjmp L202
 0CA2           L201:
 0CA2                   .dbline 667
 0CA2           ;       else if(mode == TX_MODE)
 0CA2 3DFB00            cmp [X-5],0
 0CA5 B045              jnz L203
 0CA7 3DFC00            cmp [X-4],0
 0CAA B040              jnz L203
 0CAC           X64:
 0CAC                   .dbline 668
 0CAC           ;       {
 0CAC                   .dbline 669
 0CAC           ;               LoadConfig_transmitter_config();
 0CAC 7C0000            xcall _LoadConfig_transmitter_config
 0CAF                   .dbline 671
 0CAF           ;               // Start the transmitter.
 0CAF           ;               TRANSMIT_Start(TRANSMIT_PARITY_NONE);
 0CAF 10                push X
 0CB0 5000              mov A,0
 0CB2 7C0000            xcall _TRANSMIT_Start
 0CB5 20                pop X
 0CB6                   .dbline 673
 0CB6           ;               
 0CB6           ;               TIMEOUT = 0;
 0CB6 62D000            mov REG[0xd0],>_TIMEOUT
 0CB9 550100            mov [_TIMEOUT+1],0
 0CBC 550000            mov [_TIMEOUT],0
 0CBF                   .dbline 674
 0CBF           ;               TX_TIMEOUT_EnableInt(); // Make sure interrupts are enabled.
 0CBF 10                push X
 0CC0 7C0000            xcall _TX_TIMEOUT_EnableInt
 0CC3                   .dbline 675
 0CC3           ;               TX_TIMEOUT_Start();             // Start the timer.
 0CC3 7C0000            xcall _TX_TIMEOUT_Start
 0CC6 20                pop X
 0CC7           L205:
 0CC7                   .dbline 678
 0CC7           ;               
 0CC7           ;               while(!TIMEOUT)
 0CC7           ;               {
 0CC7                   .dbline 681
 0CC7           ;                       // Do nothing while we wait for one timeout period.
 0CC7           ;                       // This is to allow everyone to get in the right configuration.
 0CC7           ;               }
 0CC7           L206:
 0CC7                   .dbline 677
 0CC7 62D000            mov REG[0xd0],>_TIMEOUT
 0CCA 3C0000            cmp [_TIMEOUT],0
 0CCD B006              jnz X65
 0CCF 3C0100            cmp [_TIMEOUT+1],0
 0CD2 AFF4              jz L205
 0CD4           X65:
 0CD4                   .dbline 683
 0CD4           ;               
 0CD4           ;               TX_TIMEOUT_Stop();              // Stop the timer.
 0CD4 10                push X
 0CD5 7C0000            xcall _TX_TIMEOUT_Stop
 0CD8 20                pop X
 0CD9                   .dbline 684
 0CD9           ;               TIMEOUT = 0;                    // Reset the timeout flag.
 0CD9 62D000            mov REG[0xd0],>_TIMEOUT
 0CDC 550100            mov [_TIMEOUT+1],0
 0CDF 550000            mov [_TIMEOUT],0
 0CE2                   .dbline 686
 0CE2           ;               
 0CE2           ;               STATE = TX_MODE;
 0CE2 62D000            mov REG[0xd0],>_STATE
 0CE5 550100            mov [_STATE+1],0
 0CE8 550000            mov [_STATE],0
 0CEB                   .dbline 687
 0CEB           ;       }
 0CEB           L203:
 0CEB           L202:
 0CEB           L200:
 0CEB                   .dbline 690
 0CEB           ;       
 0CEB           ;       // Reconnect to the global bus.
 0CEB           ;       PRT0GS |= 0b11111111;
 0CEB 4302FF            or REG[0x2],-1
 0CEE                   .dbline -2
 0CEE           L196:
 0CEE 20                pop X
 0CEF                   .dbline 0 ; func end
 0CEF 7F                ret
 0CF0                   .dbsym l mode -5 I
 0CF0                   .dbend
 0CF0                   .dbfunc e unloadAllConfigs _unloadAllConfigs fV
 0CF0           _unloadAllConfigs::
 0CF0                   .dbline -1
 0CF0                   .dbline 696
 0CF0           ; }
 0CF0           ; 
 0CF0           ; // This function blindly unloads all user configurations. This will be called once,
 0CF0           ; // when the system initially has no known state.
 0CF0           ; void unloadAllConfigs(void)
 0CF0           ; {
 0CF0                   .dbline 697
 0CF0           ;       UnloadConfig_pc_listener();
 0CF0 7C0000            xcall _UnloadConfig_pc_listener
 0CF3                   .dbline 698
 0CF3           ;       UnloadConfig_receiver_config();
 0CF3 7C0000            xcall _UnloadConfig_receiver_config
 0CF6                   .dbline 699
 0CF6           ;       UnloadConfig_transmitter_config();
 0CF6 7C0000            xcall _UnloadConfig_transmitter_config
 0CF9                   .dbline -2
 0CF9           L208:
 0CF9                   .dbline 0 ; func end
 0CF9 7F                ret
 0CFA                   .dbend
 0CFA                   .dbfunc e unloadConfig _unloadConfig fV
 0CFA           ;     config_num -> X-5
 0CFA           _unloadConfig::
 0CFA                   .dbline -1
 0CFA 10                push X
 0CFB 4F                mov X,SP
 0CFC                   .dbline 705
 0CFC           ; }
 0CFC           ; 
 0CFC           ; // This function unloads the configuration corresponding to the config number passed to it.
 0CFC           ; // We do this instead of unloadAllConfigs to cut down on set up time.
 0CFC           ; void unloadConfig(int config_num)
 0CFC           ; {
 0CFC                   .dbline 706
 0CFC           ;       if(config_num == PC_MODE)
 0CFC 3DFB00            cmp [X-5],0
 0CFF B00B              jnz L210
 0D01 3DFC02            cmp [X-4],2
 0D04 B006              jnz L210
 0D06           X66:
 0D06                   .dbline 707
 0D06           ;       {
 0D06                   .dbline 708
 0D06           ;               UnloadConfig_pc_listener();
 0D06 7C0000            xcall _UnloadConfig_pc_listener
 0D09                   .dbline 709
 0D09           ;       }
 0D09 801D              xjmp L211
 0D0B           L210:
 0D0B                   .dbline 710
 0D0B           ;       else if(config_num == RX_MODE)
 0D0B 3DFB00            cmp [X-5],0
 0D0E B00B              jnz L212
 0D10 3DFC01            cmp [X-4],1
 0D13 B006              jnz L212
 0D15           X67:
 0D15                   .dbline 711
 0D15           ;       {
 0D15                   .dbline 712
 0D15           ;               UnloadConfig_receiver_config();
 0D15 7C0000            xcall _UnloadConfig_receiver_config
 0D18                   .dbline 713
 0D18           ;       }
 0D18 800E              xjmp L213
 0D1A           L212:
 0D1A                   .dbline 714
 0D1A           ;       else if(config_num == TX_MODE)
 0D1A 3DFB00            cmp [X-5],0
 0D1D B009              jnz L214
 0D1F 3DFC00            cmp [X-4],0
 0D22 B004              jnz L214
 0D24           X68:
 0D24                   .dbline 715
 0D24           ;       {
 0D24                   .dbline 716
 0D24           ;               UnloadConfig_transmitter_config();
 0D24 7C0000            xcall _UnloadConfig_transmitter_config
 0D27                   .dbline 717
 0D27           ;       }
 0D27           L214:
 0D27           L213:
 0D27           L211:
 0D27                   .dbline -2
 0D27           L209:
 0D27 20                pop X
 0D28                   .dbline 0 ; func end
 0D28 7F                ret
 0D29                   .dbsym l config_num -5 I
 0D29                   .dbend
 0D29                   .dbfunc e busListen _busListen fV
 0D29           _busListen::
 0D29                   .dbline -1
 0D29                   .dbline 721
 0D29           ; }
 0D29           ; 
 0D29           ; void busListen(void)
 0D29           ; {
 0D29                   .dbline 722
 0D29           ;       configToggle(RX_MODE);
 0D29 5000              mov A,0
 0D2B 08                push A
 0D2C 5001              mov A,1
 0D2E 08                push A
 0D2F 9EE0              xcall _configToggle
 0D31 38FE              add SP,-2
 0D33 8013              xjmp L218
 0D35           L217:
 0D35                   .dbline 726
 0D35           ; 
 0D35           ;       // Wait for the first byte.
 0D35           ;       while(TIMEOUT < BOOT_TIMEOUT)
 0D35           ;       {       
 0D35                   .dbline 727
 0D35           ;               if(RECEIVE_cReadChar())
 0D35 10                push X
 0D36 7C0000            xcall _RECEIVE_cReadChar
 0D39 20                pop X
 0D3A 3900              cmp A,0
 0D3C A00A              jz L220
 0D3E                   .dbline 728
 0D3E           ;               {
 0D3E                   .dbline 729
 0D3E           ;                       TIMEOUT = BOOT_TIMEOUT;
 0D3E 62D000            mov REG[0xd0],>_TIMEOUT
 0D41 55012C            mov [_TIMEOUT+1],44
 0D44 550001            mov [_TIMEOUT],1
 0D47                   .dbline 730
 0D47           ;               }
 0D47           L220:
 0D47                   .dbline 731
 0D47           ;       }
 0D47           L218:
 0D47                   .dbline 725
 0D47 62D000            mov REG[0xd0],>_TIMEOUT
 0D4A 5101              mov A,[_TIMEOUT+1]
 0D4C 112C              sub A,44
 0D4E 5100              mov A,[_TIMEOUT]
 0D50 3180              xor A,-128
 0D52 1981              sbb A,(1 ^ 0x80)
 0D54 CFE0              jc L217
 0D56           X69:
 0D56                   .dbline 734
 0D56           ;       
 0D56           ;       // Clear the timeout flag.
 0D56           ;       TIMEOUT = 0;
 0D56 62D000            mov REG[0xd0],>_TIMEOUT
 0D59 550100            mov [_TIMEOUT+1],0
 0D5C 550000            mov [_TIMEOUT],0
 0D5F 8013              xjmp L223
 0D61           L222:
 0D61                   .dbline 738
 0D61           ;       
 0D61           ;       // Wait for BUS_CLEAR_TIME to pass without hearing a byte.
 0D61           ;       while(TIMEOUT < BUS_CLEAR_TIME)
 0D61           ;       {       
 0D61                   .dbline 739
 0D61           ;               if(RECEIVE_cReadChar())
 0D61 10                push X
 0D62 7C0000            xcall _RECEIVE_cReadChar
 0D65 20                pop X
 0D66 3900              cmp A,0
 0D68 A00A              jz L225
 0D6A                   .dbline 740
 0D6A           ;               {
 0D6A                   .dbline 741
 0D6A           ;                       TIMEOUT = 0;    
 0D6A 62D000            mov REG[0xd0],>_TIMEOUT
 0D6D 550100            mov [_TIMEOUT+1],0
 0D70 550000            mov [_TIMEOUT],0
 0D73                   .dbline 742
 0D73           ;               }
 0D73           L225:
 0D73                   .dbline 743
 0D73           ;       }
 0D73           L223:
 0D73                   .dbline 737
 0D73 62D000            mov REG[0xd0],>_TIMEOUT
 0D76 5101              mov A,[_TIMEOUT+1]
 0D78 1164              sub A,100
 0D7A 5100              mov A,[_TIMEOUT]
 0D7C 3180              xor A,-128
 0D7E 1980              sbb A,(0 ^ 0x80)
 0D80 CFE0              jc L222
 0D82           X70:
 0D82                   .dbline -2
 0D82           L216:
 0D82                   .dbline 0 ; func end
 0D82 7F                ret
 0D83                   .dbend
 0D83                   .dbfunc e initializeSlaves _initializeSlaves fV
 0D83           ;   num_timeouts -> X+4
 0D83           ;     ping_tries -> X+2
 0D83           ;              i -> X+0
 0D83           _initializeSlaves::
 0D83                   .dbline -1
 0D83 10                push X
 0D84 4F                mov X,SP
 0D85 3806              add SP,6
 0D87                   .dbline 747
 0D87           ; }
 0D87           ; 
 0D87           ; void initializeSlaves(void)
 0D87           ; {
 0D87                   .dbline 748
 0D87           ;       int num_timeouts = 0;   // The number of consecutive timeouts.
 0D87 560500            mov [X+5],0
 0D8A 560400            mov [X+4],0
 0D8D                   .dbline 749
 0D8D           ;       int ping_tries = 5;             // The number of times to try a ping on an unregistered module.
 0D8D 560305            mov [X+3],5
 0D90 560200            mov [X+2],0
 0D93                   .dbline 750
 0D93           ;       int i = 0;                              // An iterator for looping.
 0D93 560100            mov [X+1],0
 0D96 560000            mov [X+0],0
 0D99                   .dbline 753
 0D99           ;       
 0D99           ;       // Set num modules to zero.
 0D99           ;       NUM_MODULES = 0;
 0D99 62D000            mov REG[0xd0],>_NUM_MODULES
 0D9C 550100            mov [_NUM_MODULES+1],0
 0D9F 550000            mov [_NUM_MODULES],0
 0DA2                   .dbline 756
 0DA2           ;       
 0DA2           ;       // Send out a probing message.
 0DA2           ;       sayHello();
 0DA2 7C0315            xcall _sayHello
 0DA5 80D7              xjmp L229
 0DA7           L228:
 0DA7                   .dbline 761
 0DA7           ;       
 0DA7           ;       // This loop continuously probes and listens at intervals
 0DA7           ;       // set by the RX_TIMEOUT_DURATION variable.
 0DA7           ;       while(num_timeouts < MAX_TIMEOUTS)
 0DA7           ;       {       
 0DA7                   .dbline 762
 0DA7           ;               if(validTransmission())
 0DA7 7C036D            xcall _validTransmission
 0DAA 62D000            mov REG[0xd0],>__r0
 0DAD 3C0000            cmp [__r0],0
 0DB0 B006              jnz X71
 0DB2 3C0000            cmp [__r1],0
 0DB5 A0A1              jz L231
 0DB7           X71:
 0DB7                   .dbline 763
 0DB7           ;               {
 0DB7                   .dbline 764
 0DB7           ;                       if(COMMAND_TYPE == HELLO_BYTE)  // Someone else is out there!
 0DB7 62D000            mov REG[0xd0],>_COMMAND_TYPE
 0DBA 3C00C8            cmp [_COMMAND_TYPE],-56
 0DBD B0BF              jnz L232
 0DBF                   .dbline 765
 0DBF           ;                       {
 0DBF                   .dbline 767
 0DBF           ;                               // If this is for me, assign them an ID.
 0DBF           ;                               if(COMMAND_DESTINATION == MASTER_ID)
 0DBF 62D000            mov REG[0xd0],>_COMMAND_DESTINATION
 0DC2 3C0000            cmp [_COMMAND_DESTINATION],0
 0DC5 B0B7              jnz L232
 0DC7                   .dbline 768
 0DC7           ;                               {
 0DC7                   .dbline 769
 0DC7           ;                                       NUM_MODULES++;                  // Increment the number of modules connected.
 0DC7 62D000            mov REG[0xd0],>_NUM_MODULES
 0DCA 7601              inc [_NUM_MODULES+1]
 0DCC 0E0000            adc [_NUM_MODULES],0
 0DCF                   .dbline 770
 0DCF           ;                                       num_timeouts = 0;               // Reset number of timeouts since we found someone.
 0DCF 560500            mov [X+5],0
 0DD2 560400            mov [X+4],0
 0DD5                   .dbline 772
 0DD5           ;               
 0DD5           ;                                       if(!assignID(NUM_MODULES))
 0DD5 5100              mov A,[_NUM_MODULES]
 0DD7 08                push A
 0DD8 5101              mov A,[_NUM_MODULES+1]
 0DDA 08                push A
 0DDB 7C0126            xcall _assignID
 0DDE 38FE              add SP,-2
 0DE0 62D000            mov REG[0xd0],>__r0
 0DE3 3C0000            cmp [__r0],0
 0DE6 B096              jnz L232
 0DE8 3C0000            cmp [__r1],0
 0DEB B091              jnz L232
 0DED           X72:
 0DED                   .dbline 773
 0DED           ;                                       {
 0DED                   .dbline 777
 0DED           ;                                               // If the module did not respond that the ID was assigned,
 0DED           ;                                               // make an effort to ping it in case that transmission was lost
 0DED           ;                                               // before ultimately deciding that the module didn't configure.
 0DED           ;                                               for(i = 0; i < ping_tries; i++)
 0DED 560100            mov [X+1],0
 0DF0 560000            mov [X+0],0
 0DF3 8038              xjmp L242
 0DF5           L239:
 0DF5                   .dbline 778
 0DF5           ;                                               {       
 0DF5                   .dbline 779
 0DF5           ;                                                       if(pingModule(NUM_MODULES))
 0DF5 62D000            mov REG[0xd0],>_NUM_MODULES
 0DF8 5100              mov A,[_NUM_MODULES]
 0DFA 08                push A
 0DFB 5101              mov A,[_NUM_MODULES+1]
 0DFD 08                push A
 0DFE 7C0037            xcall _pingModule
 0E01 38FE              add SP,-2
 0E03 62D000            mov REG[0xd0],>__r0
 0E06 3C0000            cmp [__r0],0
 0E09 B006              jnz X73
 0E0B 3C0000            cmp [__r1],0
 0E0E A018              jz L243
 0E10           X73:
 0E10                   .dbline 780
 0E10           ;                                                       {
 0E10                   .dbline 781
 0E10           ;                                                               i = ping_tries*2;
 0E10 62D000            mov REG[0xd0],>__r0
 0E13 5203              mov A,[X+3]
 0E15 5300              mov [__r1],A
 0E17 5202              mov A,[X+2]
 0E19 5300              mov [__r0],A
 0E1B 6500              asl [__r1]
 0E1D 6B00              rlc [__r0]
 0E1F 5100              mov A,[__r1]
 0E21 5401              mov [X+1],A
 0E23 5100              mov A,[__r0]
 0E25 5400              mov [X+0],A
 0E27                   .dbline 782
 0E27           ;                                                       }
 0E27           L243:
 0E27                   .dbline 783
 0E27           ;                                               }
 0E27           L240:
 0E27                   .dbline 777
 0E27 7701              inc [X+1]
 0E29 0F0000            adc [X+0],0
 0E2C           L242:
 0E2C                   .dbline 777
 0E2C 5201              mov A,[X+1]
 0E2E 1303              sub A,[X+3]
 0E30 5202              mov A,[X+2]
 0E32 3180              xor A,-128
 0E34 62D000            mov REG[0xd0],>__r0
 0E37 5300              mov [__rX],A
 0E39 5200              mov A,[X+0]
 0E3B 3180              xor A,-128
 0E3D 1A00              sbb A,[__rX]
 0E3F CFB5              jc L239
 0E41           X74:
 0E41                   .dbline 786
 0E41           ;                                               
 0E41           ;                                               // If we landed right at ping_tries, we failed.
 0E41           ;                                               if(i == ping_tries)
 0E41 5200              mov A,[X+0]
 0E43 3B02              cmp A,[X+2]
 0E45 B037              jnz L232
 0E47 5201              mov A,[X+1]
 0E49 3B03              cmp A,[X+3]
 0E4B B031              jnz L232
 0E4D           X75:
 0E4D                   .dbline 787
 0E4D           ;                                               {
 0E4D                   .dbline 788
 0E4D           ;                                                       NUM_MODULES--;
 0E4D 62D000            mov REG[0xd0],>_NUM_MODULES
 0E50 7A01              dec [_NUM_MODULES+1]
 0E52 1E0000            sbb [_NUM_MODULES],0
 0E55                   .dbline 789
 0E55           ;                                               }
 0E55                   .dbline 790
 0E55           ;                                       }
 0E55                   .dbline 791
 0E55           ;                               }
 0E55                   .dbline 792
 0E55           ;                       }
 0E55                   .dbline 793
 0E55           ;               }
 0E55 8027              xjmp L232
 0E57           L231:
 0E57                   .dbline 794
 0E57           ;               else if(TIMEOUT >= RX_TIMEOUT_DURATION)
 0E57 62D000            mov REG[0xd0],>_TIMEOUT
 0E5A 5101              mov A,[_TIMEOUT+1]
 0E5C 1105              sub A,5
 0E5E 5100              mov A,[_TIMEOUT]
 0E60 3180              xor A,-128
 0E62 1980              sbb A,(0 ^ 0x80)
 0E64 C018              jc L247
 0E66           X76:
 0E66                   .dbline 795
 0E66           ;               {       
 0E66                   .dbline 796
 0E66           ;                       num_timeouts++;
 0E66 7705              inc [X+5]
 0E68 0F0400            adc [X+4],0
 0E6B                   .dbline 799
 0E6B           ;                       
 0E6B           ;                       // If we are not maxed out on modules, look for more.
 0E6B           ;                       if(NUM_MODULES < MAX_MODULES)
 0E6B 62D000            mov REG[0xd0],>_NUM_MODULES
 0E6E 5101              mov A,[_NUM_MODULES+1]
 0E70 11FA              sub A,-6
 0E72 5100              mov A,[_NUM_MODULES]
 0E74 3180              xor A,-128
 0E76 1980              sbb A,(0 ^ 0x80)
 0E78 D004              jnc L249
 0E7A           X77:
 0E7A                   .dbline 800
 0E7A           ;                       {
 0E7A                   .dbline 801
 0E7A           ;                               sayHello();
 0E7A 7C0315            xcall _sayHello
 0E7D                   .dbline 802
 0E7D           ;                       }
 0E7D           L249:
 0E7D                   .dbline 803
 0E7D           ;               }
 0E7D           L247:
 0E7D           L232:
 0E7D                   .dbline 804
 0E7D           ;       }
 0E7D           L229:
 0E7D                   .dbline 760
 0E7D 5205              mov A,[X+5]
 0E7F 1132              sub A,50
 0E81 5204              mov A,[X+4]
 0E83 3180              xor A,-128
 0E85 1980              sbb A,(0 ^ 0x80)
 0E87 CF1F              jc L228
 0E89           X78:
 0E89                   .dbline 807
 0E89           ;       
 0E89           ;       // If we didn't find any new modules, check to see if some already exist.
 0E89           ;       if(!NUM_MODULES)
 0E89 62D000            mov REG[0xd0],>_NUM_MODULES
 0E8C 3C0000            cmp [_NUM_MODULES],0
 0E8F B062              jnz L251
 0E91 3C0100            cmp [_NUM_MODULES+1],0
 0E94 B05D              jnz L251
 0E96           X79:
 0E96                   .dbline 808
 0E96           ;       {
 0E96                   .dbline 810
 0E96           ;               // Try to ping the next module up from our current number ping_tries times.
 0E96           ;               for(i = 0; i < ping_tries; i++)
 0E96 560100            mov [X+1],0
 0E99 560000            mov [X+0],0
 0E9C 8040              xjmp L256
 0E9E           L253:
 0E9E                   .dbline 811
 0E9E           ;               {       
 0E9E                   .dbline 812
 0E9E           ;                       if(pingModule(NUM_MODULES+1))
 0E9E 62D000            mov REG[0xd0],>_NUM_MODULES
 0EA1 5101              mov A,[_NUM_MODULES+1]
 0EA3 0101              add A,1
 0EA5 62D000            mov REG[0xd0],>__r0
 0EA8 5300              mov [__r1],A
 0EAA 62D000            mov REG[0xd0],>_NUM_MODULES
 0EAD 5100              mov A,[_NUM_MODULES]
 0EAF 0900              adc A,0
 0EB1 62D000            mov REG[0xd0],>__r0
 0EB4 08                push A
 0EB5 5100              mov A,[__r1]
 0EB7 08                push A
 0EB8 7C0037            xcall _pingModule
 0EBB 38FE              add SP,-2
 0EBD 62D000            mov REG[0xd0],>__r0
 0EC0 3C0000            cmp [__r0],0
 0EC3 B006              jnz X80
 0EC5 3C0000            cmp [__r1],0
 0EC8 A00F              jz L257
 0ECA           X80:
 0ECA                   .dbline 813
 0ECA           ;                       {
 0ECA                   .dbline 814
 0ECA           ;                               NUM_MODULES++;
 0ECA 62D000            mov REG[0xd0],>_NUM_MODULES
 0ECD 7601              inc [_NUM_MODULES+1]
 0ECF 0E0000            adc [_NUM_MODULES],0
 0ED2                   .dbline 815
 0ED2           ;                               i = 0;
 0ED2 560100            mov [X+1],0
 0ED5 560000            mov [X+0],0
 0ED8                   .dbline 816
 0ED8           ;                       }
 0ED8           L257:
 0ED8                   .dbline 817
 0ED8           ;               }
 0ED8           L254:
 0ED8                   .dbline 810
 0ED8 7701              inc [X+1]
 0EDA 0F0000            adc [X+0],0
 0EDD           L256:
 0EDD                   .dbline 810
 0EDD 5201              mov A,[X+1]
 0EDF 1303              sub A,[X+3]
 0EE1 5202              mov A,[X+2]
 0EE3 3180              xor A,-128
 0EE5 62D000            mov REG[0xd0],>__r0
 0EE8 5300              mov [__rX],A
 0EEA 5200              mov A,[X+0]
 0EEC 3180              xor A,-128
 0EEE 1A00              sbb A,[__rX]
 0EF0 CFAD              jc L253
 0EF2           X81:
 0EF2                   .dbline 818
 0EF2           ;       }
 0EF2           L251:
 0EF2                   .dbline 821
 0EF2           ;       
 0EF2           ;       // Switch back to PC mode.
 0EF2           ;       configToggle(PC_MODE);
 0EF2 5000              mov A,0
 0EF4 08                push A
 0EF5 5002              mov A,2
 0EF7 08                push A
 0EF8 9D17              xcall _configToggle
 0EFA 38FE              add SP,-2
 0EFC                   .dbline -2
 0EFC           L227:
 0EFC 38FA              add SP,-6
 0EFE 20                pop X
 0EFF                   .dbline 0 ; func end
 0EFF 7F                ret
 0F00                   .dbsym l num_timeouts 4 I
 0F00                   .dbsym l ping_tries 2 I
 0F00                   .dbsym l i 0 I
 0F00                   .dbend
 0F00                   .dbfunc e xmitWait _xmitWait fV
 0F00           ;              i -> X+0
 0F00           _xmitWait::
 0F00                   .dbline -1
 0F00 10                push X
 0F01 4F                mov X,SP
 0F02 3802              add SP,2
 0F04                   .dbline 825
 0F04           ; }
 0F04           ; 
 0F04           ; void xmitWait(void)
 0F04           ; {
 0F04                   .dbline 828
 0F04           ;       int i;
 0F04           ;       
 0F04           ;       for(i = 0; i < 25; i++)
 0F04 560100            mov [X+1],0
 0F07 560000            mov [X+0],0
 0F0A           L260:
 0F0A                   .dbline 829
 0F0A           ;       {
 0F0A                   .dbline 831
 0F0A           ;               // Sit here and spin for about 50 microseconds.
 0F0A           ;       }
 0F0A           L261:
 0F0A                   .dbline 828
 0F0A 7701              inc [X+1]
 0F0C 0F0000            adc [X+0],0
 0F0F                   .dbline 828
 0F0F 5201              mov A,[X+1]
 0F11 1119              sub A,25
 0F13 5200              mov A,[X+0]
 0F15 3180              xor A,-128
 0F17 1980              sbb A,(0 ^ 0x80)
 0F19 CFF0              jc L260
 0F1B           X82:
 0F1B                   .dbline -2
 0F1B           L259:
 0F1B 38FE              add SP,-2
 0F1D 20                pop X
 0F1E                   .dbline 0 ; func end
 0F1E 7F                ret
 0F1F                   .dbsym l i 0 I
 0F1F                   .dbend
 0F1F                   .dbfunc e TX_TIMEOUT_ISR _TX_TIMEOUT_ISR fV
 0F1F           _TX_TIMEOUT_ISR::
 0F1F                   .dbline -1
 0F1F 71C0              or F,-64
 0F21 08                push A
 0F22 5DD0              mov A,REG[0xd0]
 0F24 08                push A
 0F25                   .dbline 835
 0F25           ; }
 0F25           ; 
 0F25           ; void TX_TIMEOUT_ISR(void)
 0F25           ; {     
 0F25                   .dbline 836
 0F25           ;       TIMEOUT++;
 0F25 62D000            mov REG[0xd0],>_TIMEOUT
 0F28 7601              inc [_TIMEOUT+1]
 0F2A 0E0000            adc [_TIMEOUT],0
 0F2D                   .dbline 838
 0F2D           ;       
 0F2D           ;       M8C_ClearIntFlag(INT_CLR0,TX_TIMEOUT_INT_MASK);
 0F2D 62DAFD            mov REG[0xda],-3
 0F30                   .dbline -2
 0F30           L264:
 0F30 18                pop A
 0F31 60D0              mov REG[208],A
 0F33 18                pop A
 0F34                   .dbline 0 ; func end
 0F34 7E                reti
 0F35                   .dbend
 0F35                   .dbfunc e RX_TIMEOUT_ISR _RX_TIMEOUT_ISR fV
 0F35           _RX_TIMEOUT_ISR::
 0F35                   .dbline -1
 0F35 71C0              or F,-64
 0F37 08                push A
 0F38 5DD0              mov A,REG[0xd0]
 0F3A 08                push A
 0F3B                   .dbline 842
 0F3B           ; }
 0F3B           ; 
 0F3B           ; void RX_TIMEOUT_ISR(void)
 0F3B           ; {     
 0F3B                   .dbline 843
 0F3B           ;       TIMEOUT++;
 0F3B 62D000            mov REG[0xd0],>_TIMEOUT
 0F3E 7601              inc [_TIMEOUT+1]
 0F40 0E0000            adc [_TIMEOUT],0
 0F43                   .dbline 845
 0F43           ;       
 0F43           ;       M8C_ClearIntFlag(INT_CLR0,RX_TIMEOUT_INT_MASK);
 0F43 62DAFD            mov REG[0xda],-3
 0F46                   .dbline -2
 0F46           L265:
 0F46 18                pop A
 0F47 60D0              mov REG[208],A
 0F49 18                pop A
 0F4A                   .dbline 0 ; func end
 0F4A 7E                reti
 0F4B                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\THESIS~4\THESIS~1\main.c
 0000           _STATE::
 0000 0000              .byte 0,0
 0002                   .dbsym e STATE _STATE I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\THESIS~4\THESIS~1\main.c
 0000           _PARAM::
 0000 00000000000000000000      .byte 0,0,0,0,0,0,0,0,0,0
 000A                   .dbsym e PARAM _PARAM A[10:10]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\THESIS~4\THESIS~1\main.c
 0000           _COMMAND_TYPE::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_TYPE _COMMAND_TYPE c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\THESIS~4\THESIS~1\main.c
 0000           _COMMAND_DESTINATION::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_DESTINATION _COMMAND_DESTINATION c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\THESIS~4\THESIS~1\main.c
 0000           _COMMAND_SOURCE::
 0000 00                .byte 0
 0001                   .dbsym e COMMAND_SOURCE _COMMAND_SOURCE c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\THESIS~4\THESIS~1\main.c
 0000           _NUM_MODULES::
 0000 0000              .byte 0,0
 0002                   .dbsym e NUM_MODULES _NUM_MODULES I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Admin\DOCUME~1\PSOCDE~1.0PR\THESIS~4\THESIS~1\main.c
 0000           _TIMEOUT::
 0000 0000              .byte 0,0
 0002                   .dbsym e TIMEOUT _TIMEOUT I
